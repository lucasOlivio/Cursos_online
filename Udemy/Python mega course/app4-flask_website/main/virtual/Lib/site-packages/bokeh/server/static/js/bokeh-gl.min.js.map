{"version":3,"sources":["tree/models/glyphs/webgl/base.js","tree/models/glyphs/webgl/index.js","tree/models/glyphs/webgl/line.frag.js","tree/models/glyphs/webgl/line.js","tree/models/glyphs/webgl/line.vert.js","tree/models/glyphs/webgl/main.js","tree/models/glyphs/webgl/markers.js","../../node_modules/gloo2/gloo2.js"],"names":["429","require","module","exports","color_1","BaseGLGlyph","gl","glyph","this","nvertices","size_changed","data_changed","visuals_changed","init","initClass","prototype","GLYPH","VERT","FRAG","set_data_changed","n","set_visuals_changed","render","ctx","indices","mainglyph","wy","wx","_a","renderer","map_to_screen","dx","dy","Math","min","max","abs","_b","_c","sx","sy","trans","pixel_ratio","width","glcanvas","height","draw","line_width","sqrt","fill_array_with_float","val","a","Float32Array","i","end","fill_array_with_vec","m","j","endj","visual_prop_is_singular","visual","propname","undefined","spec","value","attach_float","prog","vbo","att_name","name","doit","used","set_attribute","cache","set_size","set_data","attach_color","prefix","rgba","colorname","alphaname","color2rgba","alphas","colors","result","push","430","tslib_1","__exportStar","431","fragment_shader","432","gloo2_1","base_1","line_vert_1","line_frag_1","DashAtlas","_atlas","_index","_width","_height","tex","Texture2D","set_wrapping","REPEAT","set_interpolation","NEAREST","RGBA","Uint8Array","get_atlas_data","pattern","key","join","findex_period","make_pattern","data","period","map","x","length","concat","_i","pattern_1","v","C","c","b","Z","dash_end","dash_start","dash_type","index","val_at_index","LineGLGlyph","_super","apply","arguments","__extends","JOINS","miter","round","bevel","CAPS","","none",".",")","(","o","triangle in","<","triangle out",">","square","[","]","=","butt","|","vertex_shader","_scale_aspect","Program","set_shaders","index_buffer","IndexBuffer","vbo_position","VertexBuffer","vbo_tangents","vbo_segment","vbo_angles","vbo_texcoord","dash_atlas","mainGlyph","mainGlGlyph","glglyph","isFinite","_baked_offset","_set_data","_set_visuals","scale_length","_update_scale","set_uniform","cumsum","set_texture","baked_offset","I_triangles","Uint16Array","TRIANGLES","chunks","ceil","uint16_index","chunk","floor","these_indices","offset","_bake","V_position","V_tangents","V_angles","V_texcoord","color","visuals","line","line_color","line_alpha","cap","line_cap","line_join","dash_pattern","line_dash","dash_index","dash_period","line_dash_offset","I","T","V_angles2","V_position2","V_tangents2","V_texcoord2","Vp","Vt","_x","Float64Array","_y","tangents","A","atan2","k","ni","Uint32Array","V_segment2","N","V_segment","pow","433","434","435","logging_1","MarkerGLGlyph","MARKERCODE","frag","replace","last_trans","vbo_x","vbo_y","vbo_s","vbo_a","vbo_linewidth","vbo_fg_color","vbo_bg_color","_radius","sradius","s","POINTS","ua","window","navigator","userAgent","indexOf","logger","warn","xx","yy","_angle","_size","fill","CircleGLGlyph","SquareGLGlyph","AnnulusGLGlyph","DiamondGLGlyph","TriangleGLGlyph","InvertedTriangleGLGlyph","CrossGLGlyph","CircleCrossGLGlyph","SquareCrossGLGlyph","DiamondCrossGLGlyph","XGLGlyph","CircleXGLGlyph","SquareXGLGlyph","AsteriskGLGlyph","436","Buffer","GlooObject","Texture3DLike","check_error","console","_pyfunc_add","Array","isArray","_pyfunc_contains","_pyfunc_equals","constructor","Object","String","e","Error","equals","iseq","akeys","keys","bkeys","sort","_pyfunc_instantiate","ob","args","global","nobind","bind","__init__","_pyfunc_mult","_pymeth_repeat","call","t","res","_pyfunc_truthy","byteLength","getOwnPropertyNames","_pymeth_append","append","_pymeth_get","d","get","_pymeth_remove","remove","splice","count","repeat","valueOf","_pymeth_startswith","startswith","when","err","err_3","errors","msg","stub1_seq","stub2_itr","getError","NO_ERROR","_base_class","_class_name","_gl","handle","_create","err_2","create","UTYPEMAP","float","vec2","vec3","vec4","int","ivec2","ivec3","ivec4","bool","bvec2","bvec3","bvec4","mat2","mat3","mat4","sampler1D","sampler2D","sampler3D","ATYPEMAP","ATYPEINFO","createProgram","locations","_unset_variables","_validated","_samplers","_attributes","_known_invalid","delete","deleteProgram","activate","useProgram","deactivate","vert","code","err_4","frag_handle","status","stub3_","tmp","type_","vert_handle","_linked","createShader","VERTEX_SHADER","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","_get_active_attributes_and_uniforms","detachShader","deleteShader","attributes","ca","container","cu","getActive","getLocation","info","regex","stub4_","stub5_seq","stub6_itr","uniforms","RegExp","ACTIVE_UNIFORMS","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","getActiveUniform","getUniformLocation","match","size","type","iter0","i0","unit","log","_target","uniform1i","a_type","funcname","name_","chars","lstrip","slice","stride","gtype","is_vbo","stub7_","FALSE","_pre_draw","attr_handle","stub10_","stub11_seq","stub8_","stub9_seq","tex_handle","tex_target","vbo_handle","hasOwnProperty","activeTexture","TEXTURE0","bindTexture","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","disableVertexAttribArray","_validate","validateProgram","VALIDATE_STATUS","mode","selection","first","stub12_","_buffer_size","UNSIGNED_SHORT","drawElements","drawArrays","_usage","createBuffer","deleteBuffer","nbytes","bufferData","bufferSubData","_types","Int8Array","Int16Array","Int32Array","createTexture","_shape_format","deleteTexture","_get_alignment","alignment","stub13_seq","stub14_itr","wrap_s","wrap_t","texParameterf","TEXTURE_WRAP_S","TEXTURE_WRAP_T","mag","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","shape","format","stub15_","texImage2D","UNSIGNED_BYTE","u_shape","stub16_","stub17_","y","pixelStorei","UNPACK_ALIGNMENT","texSubImage2D","GLSL_SAMPLE_NEAREST","GLSL_SAMPLE_LINEAR","_get_tile_info","max_size","ncols","nrows","getParameter","MAX_TEXTURE_SIZE","sim_shape","stub18_","u_tiles","Type","col","elements_per_tile","row","stub19_","stub20_","tile","z","zeros","_pyfunc_all"],"mappings":"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","file":"bokeh-gl.min.js","sourcesContent":["/*models/glyphs/webgl/base*/\nfunction _(require, module, exports) {\n    /* XXX: partial */\n    // This module implements the Base GL Glyph and some utilities\n    var color_1 = require(27    /* core/util/color */);\n    var BaseGLGlyph = function () {\n        function BaseGLGlyph(gl, glyph) {\n            this.gl = gl;\n            this.glyph = glyph;\n            this.nvertices = 0;\n            this.size_changed = false;\n            this.data_changed = false;\n            this.visuals_changed = false;\n            this.init();\n        }\n        BaseGLGlyph.initClass = function () {\n            this.prototype.GLYPH = '';\n            // name of the glyph that this gl-glyph applies to\n            this.prototype.VERT = '';\n            this.prototype.FRAG = '';\n        };\n        BaseGLGlyph.prototype.set_data_changed = function (n) {\n            if (n !== this.nvertices) {\n                this.nvertices = n;\n                this.size_changed = true;\n            }\n            return this.data_changed = true;\n        };\n        BaseGLGlyph.prototype.set_visuals_changed = function () {\n            return this.visuals_changed = true;\n        };\n        BaseGLGlyph.prototype.render = function (ctx, indices, mainglyph) {\n            // Get transform\n            var wy;\n            var wx = wy = 1;\n            // Weights to scale our vectors\n            var _a = this.glyph.renderer.map_to_screen([\n                    0 * wx,\n                    1 * wx,\n                    2 * wx\n                ], [\n                    0 * wy,\n                    1 * wy,\n                    2 * wy\n                ]), dx = _a[0], dy = _a[1];\n            // Try again, but with weighs so we're looking at ~100 in screen coordinates\n            wx = 100 / Math.min(Math.max(Math.abs(dx[1] - dx[0]), 1e-12), 1000000000000);\n            wy = 100 / Math.min(Math.max(Math.abs(dy[1] - dy[0]), 1e-12), 1000000000000);\n            _b = this.glyph.renderer.map_to_screen([\n                0 * wx,\n                1 * wx,\n                2 * wx\n            ], [\n                0 * wy,\n                1 * wy,\n                2 * wy\n            ]), dx = _b[0], dy = _b[1];\n            // Test how linear it is\n            if (Math.abs(dx[1] - dx[0] - (dx[2] - dx[1])) > 0.000001 || Math.abs(dy[1] - dy[0] - (dy[2] - dy[1])) > 0.000001) {\n                return false;\n            }\n            var _c = [\n                    (dx[1] - dx[0]) / wx,\n                    (dy[1] - dy[0]) / wy\n                ], sx = _c[0], sy = _c[1];\n            var trans = {\n                pixel_ratio: ctx.pixel_ratio,\n                width: ctx.glcanvas.width,\n                height: ctx.glcanvas.height,\n                dx: dx[0] / sx,\n                dy: dy[0] / sy,\n                sx: sx,\n                sy: sy\n            };\n            this.draw(indices, mainglyph, trans);\n            return true;\n            var _b;\n        };\n        return BaseGLGlyph;\n    }();\n    exports.BaseGLGlyph = BaseGLGlyph;\n    BaseGLGlyph.initClass();\n    // success\n    exports.line_width = function (width) {\n        // Increase small values to make it more similar to canvas\n        if (width < 2) {\n            width = Math.sqrt(width * 2);\n        }\n        return width;\n    };\n    exports.fill_array_with_float = function (n, val) {\n        var a = new Float32Array(n);\n        for (var i = 0, end = n; i < end; i++) {\n            a[i] = val;\n        }\n        return a;\n    };\n    exports.fill_array_with_vec = function (n, m, val) {\n        var a = new Float32Array(n * m);\n        for (var i = 0, end = n; i < end; i++) {\n            for (var j = 0, endj = m; j < endj; j++) {\n                a[i * m + j] = val[j];\n            }\n        }\n        return a;\n    };\n    exports.visual_prop_is_singular = function (visual, propname) {\n        // This touches the internals of the visual, so we limit use in this function\n        // See renderer.coffee:cache_select() for similar code\n        return visual[propname].spec.value !== undefined;\n    };\n    exports.attach_float = function (prog, vbo, att_name, n, visual, name) {\n        // Attach a float attribute to the program. Use singleton value if we can,\n        // otherwise use VBO to apply array.\n        if (!visual.doit) {\n            vbo.used = false;\n            return prog.set_attribute(att_name, 'float', [0]);\n        } else if (exports.visual_prop_is_singular(visual, name)) {\n            vbo.used = false;\n            return prog.set_attribute(att_name, 'float', visual[name].value());\n        } else {\n            vbo.used = true;\n            var a = new Float32Array(visual.cache[name + '_array']);\n            vbo.set_size(n * 4);\n            vbo.set_data(0, a);\n            return prog.set_attribute(att_name, 'float', vbo);\n        }\n    };\n    exports.attach_color = function (prog, vbo, att_name, n, visual, prefix) {\n        // Attach the color attribute to the program. If there's just one color,\n        // then use this single color for all vertices (no VBO). Otherwise we\n        // create an array and upload that to the VBO, which we attahce to the prog.\n        var rgba;\n        var m = 4;\n        var colorname = prefix + '_color';\n        var alphaname = prefix + '_alpha';\n        if (!visual.doit) {\n            // Don't draw (draw transparent)\n            vbo.used = false;\n            return prog.set_attribute(att_name, 'vec4', [\n                0,\n                0,\n                0,\n                0\n            ]);\n        } else if (exports.visual_prop_is_singular(visual, colorname) && exports.visual_prop_is_singular(visual, alphaname)) {\n            // Nice and simple; both color and alpha are singular\n            vbo.used = false;\n            rgba = color_1.color2rgba(visual[colorname].value(), visual[alphaname].value());\n            return prog.set_attribute(att_name, 'vec4', rgba);\n        } else {\n            // Use vbo; we need an array for both the color and the alpha\n            var alphas = void 0, colors = void 0;\n            vbo.used = true;\n            // Get array of colors\n            if (exports.visual_prop_is_singular(visual, colorname)) {\n                colors = function () {\n                    var result = [];\n                    for (var i = 0, end = n; i < end; i++) {\n                        result.push(visual[colorname].value());\n                    }\n                    return result;\n                }();\n            } else {\n                colors = visual.cache[colorname + '_array'];\n            }\n            // Get array of alphas\n            if (exports.visual_prop_is_singular(visual, alphaname)) {\n                alphas = exports.fill_array_with_float(n, visual[alphaname].value());\n            } else {\n                alphas = visual.cache[alphaname + '_array'];\n            }\n            // Create array of rgbs\n            var a = new Float32Array(n * m);\n            for (var i = 0, end = n; i < end; i++) {\n                rgba = color_1.color2rgba(colors[i], alphas[i]);\n                for (var j = 0, endj = m; j < endj; j++) {\n                    a[i * m + j] = rgba[j];\n                }\n            }\n            // Attach vbo\n            vbo.set_size(n * m * 4);\n            vbo.set_data(0, a);\n            return prog.set_attribute(att_name, 'vec4', vbo);\n        }\n    };    \n}","/*models/glyphs/webgl/index*/\nfunction _(require, module, exports) {\n    var tslib_1 = require(369    /* tslib */);\n    tslib_1.__exportStar(require(432    /* ./line */), exports);\n    tslib_1.__exportStar(require(435    /* ./markers */), exports);    \n}","/*models/glyphs/webgl/line.frag*/\nfunction _(require, module, exports) {\n    exports.fragment_shader = '\\nprecision mediump float;\\n\\nconst float PI = 3.14159265358979323846264;\\nconst float THETA = 15.0 * 3.14159265358979323846264/180.0;\\n\\nuniform sampler2D u_dash_atlas;\\n\\nuniform vec2 u_linecaps;\\nuniform float u_miter_limit;\\nuniform float u_linejoin;\\nuniform float u_antialias;\\nuniform float u_dash_phase;\\nuniform float u_dash_period;\\nuniform float u_dash_index;\\nuniform vec2 u_dash_caps;\\nuniform float u_closed;\\n\\nvarying vec4  v_color;\\nvarying vec2  v_segment;\\nvarying vec2  v_angles;\\nvarying vec2  v_texcoord;\\nvarying vec2  v_miter;\\nvarying float v_length;\\nvarying float v_linewidth;\\n\\n// Compute distance to cap ----------------------------------------------------\\nfloat cap( int type, float dx, float dy, float t, float linewidth )\\n{\\n    float d = 0.0;\\n    dx = abs(dx);\\n    dy = abs(dy);\\n    if      (type == 0)  discard;  // None\\n    else if (type == 1)  d = sqrt(dx*dx+dy*dy);  // Round\\n    else if (type == 3)  d = (dx+abs(dy));  // Triangle in\\n    else if (type == 2)  d = max(abs(dy),(t+dx-abs(dy)));  // Triangle out\\n    else if (type == 4)  d = max(dx,dy);  // Square\\n    else if (type == 5)  d = max(dx+t,dy);  // Butt\\n    return d;\\n}\\n\\n// Compute distance to join -------------------------------------------------\\nfloat join( in int type, in float d, in vec2 segment, in vec2 texcoord, in vec2 miter,\\n           in float linewidth )\\n{\\n    // texcoord.x is distance from start\\n    // texcoord.y is distance from centerline\\n    // segment.x and y indicate the limits (as for texcoord.x) for this segment\\n\\n    float dx = texcoord.x;\\n\\n    // Round join\\n    if( type == 1 ) {\\n        if (dx < segment.x) {\\n            d = max(d,length( texcoord - vec2(segment.x,0.0)));\\n            //d = length( texcoord - vec2(segment.x,0.0));\\n        } else if (dx > segment.y) {\\n            d = max(d,length( texcoord - vec2(segment.y,0.0)));\\n            //d = length( texcoord - vec2(segment.y,0.0));\\n        }\\n    }\\n    // Bevel join\\n    else if ( type == 2 ) {\\n        if (dx < segment.x) {\\n            vec2 x = texcoord - vec2(segment.x,0.0);\\n            d = max(d, max(abs(x.x), abs(x.y)));\\n\\n        } else if (dx > segment.y) {\\n            vec2 x = texcoord - vec2(segment.y,0.0);\\n            d = max(d, max(abs(x.x), abs(x.y)));\\n        }\\n        /*  Original code for bevel which does not work for us\\n        if( (dx < segment.x) ||  (dx > segment.y) )\\n            d = max(d, min(abs(x.x),abs(x.y)));\\n        */\\n    }\\n\\n    return d;\\n}\\n\\nvoid main()\\n{\\n    // If color is fully transparent we just discard the fragment\\n    if( v_color.a <= 0.0 ) {\\n        discard;\\n    }\\n\\n    // Test if dash pattern is the solid one (0)\\n    bool solid =  (u_dash_index == 0.0);\\n\\n    // Test if path is closed\\n    bool closed = (u_closed > 0.0);\\n\\n    vec4 color = v_color;\\n    float dx = v_texcoord.x;\\n    float dy = v_texcoord.y;\\n    float t = v_linewidth/2.0-u_antialias;\\n    float width = 1.0;  //v_linewidth; original code had dashes scale with line width, we do not\\n    float d = 0.0;\\n\\n    vec2 linecaps = u_linecaps;\\n    vec2 dash_caps = u_dash_caps;\\n    float line_start = 0.0;\\n    float line_stop = v_length;\\n\\n    // Apply miter limit; fragments too far into the miter are simply discarded\\n    if( (dx < v_segment.x) || (dx > v_segment.y) ) {\\n        float into_miter = max(v_segment.x - dx, dx - v_segment.y);\\n        if (into_miter > u_miter_limit*v_linewidth/2.0)\\n          discard;\\n    }\\n\\n    // Solid line --------------------------------------------------------------\\n    if( solid ) {\\n        d = abs(dy);\\n        if( (!closed) && (dx < line_start) ) {\\n            d = cap( int(u_linecaps.x), abs(dx), abs(dy), t, v_linewidth );\\n        }\\n        else if( (!closed) &&  (dx > line_stop) ) {\\n            d = cap( int(u_linecaps.y), abs(dx)-line_stop, abs(dy), t, v_linewidth );\\n        }\\n        else {\\n            d = join( int(u_linejoin), abs(dy), v_segment, v_texcoord, v_miter, v_linewidth );\\n        }\\n\\n    // Dash line --------------------------------------------------------------\\n    } else {\\n        float segment_start = v_segment.x;\\n        float segment_stop  = v_segment.y;\\n        float segment_center= (segment_start+segment_stop)/2.0;\\n        float freq          = u_dash_period*width;\\n        float u = mod( dx + u_dash_phase*width, freq);\\n        vec4 tex = texture2D(u_dash_atlas, vec2(u/freq, u_dash_index)) * 255.0 -10.0;  // conversion to int-like\\n        float dash_center= tex.x * width;\\n        float dash_type  = tex.y;\\n        float _start = tex.z * width;\\n        float _stop  = tex.a * width;\\n        float dash_start = dx - u + _start;\\n        float dash_stop  = dx - u + _stop;\\n\\n        // Compute extents of the first dash (the one relative to v_segment.x)\\n        // Note: this could be computed in the vertex shader\\n        if( (dash_stop < segment_start) && (dash_caps.x != 5.0) ) {\\n            float u = mod(segment_start + u_dash_phase*width, freq);\\n            vec4 tex = texture2D(u_dash_atlas, vec2(u/freq, u_dash_index)) * 255.0 -10.0;  // conversion to int-like\\n            dash_center= tex.x * width;\\n            //dash_type  = tex.y;\\n            float _start = tex.z * width;\\n            float _stop  = tex.a * width;\\n            dash_start = segment_start - u + _start;\\n            dash_stop = segment_start - u + _stop;\\n        }\\n\\n        // Compute extents of the last dash (the one relatives to v_segment.y)\\n        // Note: This could be computed in the vertex shader\\n        else if( (dash_start > segment_stop)  && (dash_caps.y != 5.0) ) {\\n            float u = mod(segment_stop + u_dash_phase*width, freq);\\n            vec4 tex = texture2D(u_dash_atlas, vec2(u/freq, u_dash_index)) * 255.0 -10.0;  // conversion to int-like\\n            dash_center= tex.x * width;\\n            //dash_type  = tex.y;\\n            float _start = tex.z * width;\\n            float _stop  = tex.a * width;\\n            dash_start = segment_stop - u + _start;\\n            dash_stop  = segment_stop - u + _stop;\\n        }\\n\\n        // This test if the we are dealing with a discontinuous angle\\n        bool discontinuous = ((dx <  segment_center) && abs(v_angles.x) > THETA) ||\\n                             ((dx >= segment_center) && abs(v_angles.y) > THETA);\\n        //if( dx < line_start) discontinuous = false;\\n        //if( dx > line_stop)  discontinuous = false;\\n\\n        float d_join = join( int(u_linejoin), abs(dy),\\n                            v_segment, v_texcoord, v_miter, v_linewidth );\\n\\n        // When path is closed, we do not have room for linecaps, so we make room\\n        // by shortening the total length\\n        if (closed) {\\n             line_start += v_linewidth/2.0;\\n             line_stop  -= v_linewidth/2.0;\\n        }\\n\\n        // We also need to take antialias area into account\\n        //line_start += u_antialias;\\n        //line_stop  -= u_antialias;\\n\\n        // Check is dash stop is before line start\\n        if( dash_stop <= line_start ) {\\n            discard;\\n        }\\n        // Check is dash start is beyond line stop\\n        if( dash_start >= line_stop ) {\\n            discard;\\n        }\\n\\n        // Check if current dash start is beyond segment stop\\n        if( discontinuous ) {\\n            // Dash start is beyond segment, we discard\\n            if( (dash_start > segment_stop) ) {\\n                discard;\\n                //gl_FragColor = vec4(1.0,0.0,0.0,.25); return;\\n            }\\n\\n            // Dash stop is before segment, we discard\\n            if( (dash_stop < segment_start) ) {\\n                discard;  //gl_FragColor = vec4(0.0,1.0,0.0,.25); return;\\n            }\\n\\n            // Special case for round caps (nicer with this)\\n            if( dash_caps.x == 1.0 ) {\\n                if( (u > _stop) && (dash_stop > segment_stop )  && (abs(v_angles.y) < PI/2.0)) {\\n                    discard;\\n                }\\n            }\\n\\n            // Special case for round caps  (nicer with this)\\n            if( dash_caps.y == 1.0 ) {\\n                if( (u < _start) && (dash_start < segment_start )  && (abs(v_angles.x) < PI/2.0)) {\\n                    discard;\\n                }\\n            }\\n\\n            // Special case for triangle caps (in & out) and square\\n            // We make sure the cap stop at crossing frontier\\n            if( (dash_caps.x != 1.0) && (dash_caps.x != 5.0) ) {\\n                if( (dash_start < segment_start )  && (abs(v_angles.x) < PI/2.0) ) {\\n                    float a = v_angles.x/2.0;\\n                    float x = (segment_start-dx)*cos(a) - dy*sin(a);\\n                    float y = (segment_start-dx)*sin(a) + dy*cos(a);\\n                    if( x > 0.0 ) discard;\\n                    // We transform the cap into square to avoid holes\\n                    dash_caps.x = 4.0;\\n                }\\n            }\\n\\n            // Special case for triangle caps (in & out) and square\\n            // We make sure the cap stop at crossing frontier\\n            if( (dash_caps.y != 1.0) && (dash_caps.y != 5.0) ) {\\n                if( (dash_stop > segment_stop )  && (abs(v_angles.y) < PI/2.0) ) {\\n                    float a = v_angles.y/2.0;\\n                    float x = (dx-segment_stop)*cos(a) - dy*sin(a);\\n                    float y = (dx-segment_stop)*sin(a) + dy*cos(a);\\n                    if( x > 0.0 ) discard;\\n                    // We transform the caps into square to avoid holes\\n                    dash_caps.y = 4.0;\\n                }\\n            }\\n        }\\n\\n        // Line cap at start\\n        if( (dx < line_start) && (dash_start < line_start) && (dash_stop > line_start) ) {\\n            d = cap( int(linecaps.x), dx-line_start, dy, t, v_linewidth);\\n        }\\n        // Line cap at stop\\n        else if( (dx > line_stop) && (dash_stop > line_stop) && (dash_start < line_stop) ) {\\n            d = cap( int(linecaps.y), dx-line_stop, dy, t, v_linewidth);\\n        }\\n        // Dash cap left - dash_type = -1, 0 or 1, but there may be roundoff errors\\n        else if( dash_type < -0.5 ) {\\n            d = cap( int(dash_caps.y), abs(u-dash_center), dy, t, v_linewidth);\\n            if( (dx > line_start) && (dx < line_stop) )\\n                d = max(d,d_join);\\n        }\\n        // Dash cap right\\n        else if( dash_type > 0.5 ) {\\n            d = cap( int(dash_caps.x), abs(dash_center-u), dy, t, v_linewidth);\\n            if( (dx > line_start) && (dx < line_stop) )\\n                d = max(d,d_join);\\n        }\\n        // Dash body (plain)\\n        else {// if( dash_type > -0.5 &&  dash_type < 0.5) {\\n            d = abs(dy);\\n        }\\n\\n        // Line join\\n        if( (dx > line_start) && (dx < line_stop)) {\\n            if( (dx <= segment_start) && (dash_start <= segment_start)\\n                && (dash_stop >= segment_start) ) {\\n                d = d_join;\\n                // Antialias at outer border\\n                float angle = PI/2.+v_angles.x;\\n                float f = abs( (segment_start - dx)*cos(angle) - dy*sin(angle));\\n                d = max(f,d);\\n            }\\n            else if( (dx > segment_stop) && (dash_start <= segment_stop)\\n                     && (dash_stop >= segment_stop) ) {\\n                d = d_join;\\n                // Antialias at outer border\\n                float angle = PI/2.+v_angles.y;\\n                float f = abs((dx - segment_stop)*cos(angle) - dy*sin(angle));\\n                d = max(f,d);\\n            }\\n            else if( dx < (segment_start - v_linewidth/2.)) {\\n                discard;\\n            }\\n            else if( dx > (segment_stop + v_linewidth/2.)) {\\n                discard;\\n            }\\n        }\\n        else if( dx < (segment_start - v_linewidth/2.)) {\\n            discard;\\n        }\\n        else if( dx > (segment_stop + v_linewidth/2.)) {\\n            discard;\\n        }\\n    }\\n\\n    // Distance to border ------------------------------------------------------\\n    d = d - t;\\n    if( d < 0.0 ) {\\n        gl_FragColor = color;\\n    } else {\\n        d /= u_antialias;\\n        gl_FragColor = vec4(color.rgb, exp(-d*d)*color.a);\\n    }\\n}\\n';    \n}","/*models/glyphs/webgl/line*/\nfunction _(require, module, exports) {\n    var tslib_1 = require(369    /* tslib */);\n    /* XXX: partial */\n    var gloo2_1 = require(436    /* gloo2 */);\n    var base_1 = require(429    /* ./base */);\n    var line_vert_1 = require(433    /* ./line.vert */);\n    var line_frag_1 = require(431    /* ./line.frag */);\n    var color_1 = require(27    /* core/util/color */);\n    var DashAtlas = function () {\n        function DashAtlas(gl) {\n            this._atlas = {};\n            this._index = 0;\n            this._width = 256;\n            this._height = 256;\n            // Init texture\n            this.tex = new gloo2_1.Texture2D(gl);\n            this.tex.set_wrapping(gl.REPEAT, gl.REPEAT);\n            this.tex.set_interpolation(gl.NEAREST, gl.NEAREST);\n            this.tex.set_size([\n                this._height,\n                this._width\n            ], gl.RGBA);\n            this.tex.set_data([\n                0,\n                0\n            ], [\n                this._height,\n                this._width\n            ], new Uint8Array(this._height * this._width * 4));\n            // Init with solid line (index 0 is reserved for this)\n            this.get_atlas_data([1]);\n        }\n        DashAtlas.prototype.get_atlas_data = function (pattern) {\n            var key = pattern.join('-');\n            var findex_period = this._atlas[key];\n            if (findex_period === undefined) {\n                var _a = this.make_pattern(pattern), data = _a[0], period = _a[1];\n                this.tex.set_data([\n                    this._index,\n                    0\n                ], [\n                    1,\n                    this._width\n                ], new Uint8Array(data.map(function (x) {\n                    return x + 10;\n                })));\n                this._atlas[key] = [\n                    this._index / this._height,\n                    period\n                ];\n                this._index += 1;\n            }\n            return this._atlas[key];\n        };\n        DashAtlas.prototype.make_pattern = function (pattern) {\n            // A pattern is defined as on/off sequence of segments\n            // It must be a multiple of 2\n            if (pattern.length > 1 && pattern.length % 2) {\n                pattern = pattern.concat(pattern);\n            }\n            // Period is sum of elements\n            var period = 0;\n            for (var _i = 0, pattern_1 = pattern; _i < pattern_1.length; _i++) {\n                var v = pattern_1[_i];\n                period += v;\n            }\n            // Find all start and end of on-segment only\n            var C = [];\n            var c = 0;\n            for (var i = 0, end = pattern.length + 2; i < end; i += 2) {\n                var a = Math.max(0.0001, pattern[i % pattern.length]);\n                var b = Math.max(0.0001, pattern[(i + 1) % pattern.length]);\n                C.push(c, c + a);\n                c += a + b;\n            }\n            // Build pattern\n            var n = this._width;\n            var Z = new Float32Array(n * 4);\n            for (var i = 0, end = n; i < end; i++) {\n                var dash_end = void 0, dash_start = void 0, dash_type = void 0;\n                var x = period * i / (n - 1);\n                // get index at min - index = np.argmin(abs(C-(x)))\n                var index = 0;\n                var val_at_index = 10000000000000000;\n                for (var j = 0, endj = C.length; j < endj; j++) {\n                    var val = Math.abs(C[j] - x);\n                    if (val < val_at_index) {\n                        index = j;\n                        val_at_index = val;\n                    }\n                }\n                if (index % 2 === 0) {\n                    dash_type = x <= C[index] ? +1 : 0;\n                    dash_start = C[index];\n                    dash_end = C[index + 1];\n                } else {\n                    dash_type = x > C[index] ? -1 : 0;\n                    dash_start = C[index - 1];\n                    dash_end = C[index];\n                }\n                Z[i * 4 + 0] = C[index];\n                Z[i * 4 + 1] = dash_type;\n                Z[i * 4 + 2] = dash_start;\n                Z[i * 4 + 3] = dash_end;\n            }\n            return [\n                Z,\n                period\n            ];\n        };\n        return DashAtlas;\n    }();\n    var LineGLGlyph = function (_super) {\n        tslib_1.__extends(LineGLGlyph, _super);\n        function LineGLGlyph() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        LineGLGlyph.initClass = function () {\n            this.prototype.GLYPH = 'line';\n            this.prototype.JOINS = {\n                'miter': 0,\n                'round': 1,\n                'bevel': 2\n            };\n            this.prototype.CAPS = {\n                '': 0,\n                'none': 0,\n                '.': 0,\n                'round': 1,\n                ')': 1,\n                '(': 1,\n                'o': 1,\n                'triangle in': 2,\n                '<': 2,\n                'triangle out': 3,\n                '>': 3,\n                'square': 4,\n                '[': 4,\n                ']': 4,\n                '=': 4,\n                'butt': 5,\n                '|': 5\n            };\n            this.prototype.VERT = line_vert_1.vertex_shader;\n            this.prototype.FRAG = line_frag_1.fragment_shader;\n        };\n        LineGLGlyph.prototype.init = function () {\n            var gl = this.gl;\n            this._scale_aspect = 0;\n            // keep track, so we know when we need to update segment data\n            // The program\n            this.prog = new gloo2_1.Program(gl);\n            this.prog.set_shaders(this.VERT, this.FRAG);\n            this.index_buffer = new gloo2_1.IndexBuffer(gl);\n            // Buffers\n            this.vbo_position = new gloo2_1.VertexBuffer(gl);\n            this.vbo_tangents = new gloo2_1.VertexBuffer(gl);\n            this.vbo_segment = new gloo2_1.VertexBuffer(gl);\n            this.vbo_angles = new gloo2_1.VertexBuffer(gl);\n            this.vbo_texcoord = new gloo2_1.VertexBuffer(gl);\n            // Dash atlas\n            this.dash_atlas = new DashAtlas(gl);\n        };\n        LineGLGlyph.prototype.draw = function (indices, mainGlyph, trans) {\n            var mainGlGlyph = mainGlyph.glglyph;\n            if (mainGlGlyph.data_changed) {\n                if (!(isFinite(trans.dx) && isFinite(trans.dy))) {\n                    return;    // not sure why, but it happens on init sometimes (#4367)\n                }\n                mainGlGlyph._baked_offset = [\n                    trans.dx,\n                    trans.dy\n                ];\n                // float32 precision workaround; used in _bake() and below\n                mainGlGlyph._set_data();\n                mainGlGlyph.data_changed = false;\n            }\n            if (this.visuals_changed) {\n                this._set_visuals();\n                this.visuals_changed = false;\n            }\n            // Decompose x-y scale into scalar scale and aspect-vector.\n            var sx = trans.sx;\n            var sy = trans.sy;\n            var scale_length = Math.sqrt(sx * sx + sy * sy);\n            sx /= scale_length;\n            sy /= scale_length;\n            // Do we need to re-calculate segment data and cumsum?\n            if (Math.abs(this._scale_aspect - sy / sx) > Math.abs(0.001 * this._scale_aspect)) {\n                mainGlGlyph._update_scale(sx, sy);\n                this._scale_aspect = sy / sx;\n            }\n            // Select buffers from main glyph\n            // (which may be this glyph but maybe not if this is a (non)selection glyph)\n            this.prog.set_attribute('a_position', 'vec2', mainGlGlyph.vbo_position);\n            this.prog.set_attribute('a_tangents', 'vec4', mainGlGlyph.vbo_tangents);\n            this.prog.set_attribute('a_segment', 'vec2', mainGlGlyph.vbo_segment);\n            this.prog.set_attribute('a_angles', 'vec2', mainGlGlyph.vbo_angles);\n            this.prog.set_attribute('a_texcoord', 'vec2', mainGlGlyph.vbo_texcoord);\n            //\n            this.prog.set_uniform('u_length', 'float', [mainGlGlyph.cumsum]);\n            this.prog.set_texture('u_dash_atlas', this.dash_atlas.tex);\n            // Handle transformation to device coordinates\n            var baked_offset = mainGlGlyph._baked_offset;\n            this.prog.set_uniform('u_pixel_ratio', 'float', [trans.pixel_ratio]);\n            this.prog.set_uniform('u_canvas_size', 'vec2', [\n                trans.width,\n                trans.height\n            ]);\n            this.prog.set_uniform('u_offset', 'vec2', [\n                trans.dx - baked_offset[0],\n                trans.dy - baked_offset[1]\n            ]);\n            this.prog.set_uniform('u_scale_aspect', 'vec2', [\n                sx,\n                sy\n            ]);\n            this.prog.set_uniform('u_scale_length', 'float', [scale_length]);\n            this.I_triangles = mainGlGlyph.I_triangles;\n            if (this.I_triangles.length < 65535) {\n                // Data is small enough to draw in one pass\n                this.index_buffer.set_size(this.I_triangles.length * 2);\n                this.index_buffer.set_data(0, new Uint16Array(this.I_triangles));\n                return this.prog.draw(this.gl.TRIANGLES, this.index_buffer);    // @prog.draw(@gl.LINE_STRIP, @index_buffer)  # Use this to draw the line skeleton\n            } else {\n                // Work around the limit that the indexbuffer must be uint16. We draw in chunks.\n                // First collect indices in chunks\n                indices = this.I_triangles;\n                var nvertices = this.I_triangles.length;\n                var chunksize = 64008;\n                // 65536 max. 64008 is divisible by 12\n                var chunks = [];\n                for (var i = 0, end = Math.ceil(nvertices / chunksize); i < end; i++) {\n                    chunks.push([]);\n                }\n                for (var i = 0, end = indices.length; i < end; i++) {\n                    var uint16_index = indices[i] % chunksize;\n                    var chunk = Math.floor(indices[i] / chunksize);\n                    chunks[chunk].push(uint16_index);\n                }\n                // Then draw each chunk\n                for (var chunk = 0, end = chunks.length; chunk < end; chunk++) {\n                    var these_indices = new Uint16Array(chunks[chunk]);\n                    var offset = chunk * chunksize * 4;\n                    if (these_indices.length === 0) {\n                        continue;\n                    }\n                    this.prog.set_attribute('a_position', 'vec2', mainGlGlyph.vbo_position, 0, offset * 2);\n                    this.prog.set_attribute('a_tangents', 'vec4', mainGlGlyph.vbo_tangents, 0, offset * 4);\n                    this.prog.set_attribute('a_segment', 'vec2', mainGlGlyph.vbo_segment, 0, offset * 2);\n                    this.prog.set_attribute('a_angles', 'vec2', mainGlGlyph.vbo_angles, 0, offset * 2);\n                    this.prog.set_attribute('a_texcoord', 'vec2', mainGlGlyph.vbo_texcoord, 0, offset * 2);\n                    // The actual drawing\n                    this.index_buffer.set_size(these_indices.length * 2);\n                    this.index_buffer.set_data(0, these_indices);\n                    this.prog.draw(this.gl.TRIANGLES, this.index_buffer);\n                }\n            }\n        };\n        LineGLGlyph.prototype._set_data = function () {\n            this._bake();\n            this.vbo_position.set_size(this.V_position.length * 4);\n            this.vbo_position.set_data(0, this.V_position);\n            this.vbo_tangents.set_size(this.V_tangents.length * 4);\n            this.vbo_tangents.set_data(0, this.V_tangents);\n            this.vbo_angles.set_size(this.V_angles.length * 4);\n            this.vbo_angles.set_data(0, this.V_angles);\n            this.vbo_texcoord.set_size(this.V_texcoord.length * 4);\n            return this.vbo_texcoord.set_data(0, this.V_texcoord);\n        };\n        LineGLGlyph.prototype._set_visuals = function () {\n            var color = color_1.color2rgba(this.glyph.visuals.line.line_color.value(), this.glyph.visuals.line.line_alpha.value());\n            var cap = this.CAPS[this.glyph.visuals.line.line_cap.value()];\n            var join = this.JOINS[this.glyph.visuals.line.line_join.value()];\n            this.prog.set_uniform('u_color', 'vec4', color);\n            this.prog.set_uniform('u_linewidth', 'float', [this.glyph.visuals.line.line_width.value()]);\n            this.prog.set_uniform('u_antialias', 'float', [0.9]);\n            // Smaller aa-region to obtain crisper images\n            this.prog.set_uniform('u_linecaps', 'vec2', [\n                cap,\n                cap\n            ]);\n            this.prog.set_uniform('u_linejoin', 'float', [join]);\n            this.prog.set_uniform('u_miter_limit', 'float', [10]);\n            // 10 should be a good value\n            // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-miterlimit\n            var dash_pattern = this.glyph.visuals.line.line_dash.value();\n            var dash_index = 0;\n            var dash_period = 1;\n            if (dash_pattern.length) {\n                _a = this.dash_atlas.get_atlas_data(dash_pattern), dash_index = _a[0], dash_period = _a[1];\n            }\n            this.prog.set_uniform('u_dash_index', 'float', [dash_index]);\n            // 0 means solid line\n            this.prog.set_uniform('u_dash_phase', 'float', [this.glyph.visuals.line.line_dash_offset.value()]);\n            this.prog.set_uniform('u_dash_period', 'float', [dash_period]);\n            this.prog.set_uniform('u_dash_caps', 'vec2', [\n                cap,\n                cap\n            ]);\n            return this.prog.set_uniform('u_closed', 'float', [0]);\n            // We dont do closed lines\n            var _a;\n        };\n        LineGLGlyph.prototype._bake = function () {\n            // This is what you get if you port 50 lines of numpy code to JS.\n            // V_segment is handled in another method, because it depends on the aspect\n            // ratio of the scale (The original paper/code assumed isotropic scaling).\n            //\n            // Buffer dtype from the Python implementation:\n            //\n            // self.vtype = np.dtype( [('a_position', 'f4', 2),\n            //                         ('a_segment',  'f4', 2),\n            //                         ('a_angles',   'f4', 2),\n            //                         ('a_tangents', 'f4', 4),\n            //                         ('a_texcoord', 'f4', 2) ])\n            // Init array of implicit shape nx2\n            var I, T, V_angles2, V_position2, V_tangents2, V_texcoord2, Vp, Vt;\n            var n = this.nvertices;\n            var _x = new Float64Array(this.glyph._x);\n            var _y = new Float64Array(this.glyph._y);\n            // Init vertex data\n            var V_position = Vp = new Float32Array(n * 2);\n            //V_segment = new Float32Array(n*2)  # Done later\n            var V_angles = new Float32Array(n * 2);\n            var V_tangents = Vt = new Float32Array(n * 4);\n            // mind the 4!\n            // Position\n            for (var i = 0, end = n; i < end; i++) {\n                V_position[i * 2 + 0] = _x[i] + this._baked_offset[0];\n                V_position[i * 2 + 1] = _y[i] + this._baked_offset[1];\n            }\n            // Tangents & norms (need tangents to calculate segments based on scale)\n            this.tangents = T = new Float32Array(n * 2 - 2);\n            for (var i = 0, end = n - 1; i < end; i++) {\n                T[i * 2 + 0] = Vp[(i + 1) * 2 + 0] - Vp[i * 2 + 0];\n                T[i * 2 + 1] = Vp[(i + 1) * 2 + 1] - Vp[i * 2 + 1];\n            }\n            for (var i = 0, end = n - 1; i < end; i++) {\n                // V['a_tangents'][+1:, :2] = T\n                V_tangents[(i + 1) * 4 + 0] = T[i * 2 + 0];\n                V_tangents[(i + 1) * 4 + 1] = T[i * 2 + 1];\n                // V['a_tangents'][:-1, 2:] = T\n                V_tangents[i * 4 + 2] = T[i * 2 + 0];\n                V_tangents[i * 4 + 3] = T[i * 2 + 1];\n            }\n            // V['a_tangents'][0  , :2] = T[0]\n            V_tangents[0 * 4 + 0] = T[0];\n            V_tangents[0 * 4 + 1] = T[1];\n            // V['a_tangents'][ -1, 2:] = T[-1]\n            V_tangents[(n - 1) * 4 + 2] = T[(n - 2) * 2 + 0];\n            V_tangents[(n - 1) * 4 + 3] = T[(n - 2) * 2 + 1];\n            // Angles\n            var A = new Float32Array(n);\n            for (var i = 0, end = n; i < end; i++) {\n                A[i] = Math.atan2(Vt[i * 4 + 0] * Vt[i * 4 + 3] - Vt[i * 4 + 1] * Vt[i * 4 + 2], Vt[i * 4 + 0] * Vt[i * 4 + 2] + Vt[i * 4 + 1] * Vt[i * 4 + 3]);\n            }\n            for (var i = 0, end = n - 1; i < end; i++) {\n                V_angles[i * 2 + 0] = A[i];\n                V_angles[i * 2 + 1] = A[i + 1];\n            }\n            // Step 1: A -- B -- C  =>  A -- B, B' -- C\n            // Repeat our array 4 times\n            var m = 4 * n - 4;\n            this.V_position = V_position2 = new Float32Array(m * 2);\n            this.V_angles = V_angles2 = new Float32Array(m * 2);\n            this.V_tangents = V_tangents2 = new Float32Array(m * 4);\n            // mind the 4!\n            this.V_texcoord = V_texcoord2 = new Float32Array(m * 2);\n            var o = 2;\n            //\n            // Arg, we really need an ndarray thing in JS :/\n            for (var i = 0, end = n; i < end; i++) {\n                for (var j = 0; j < 4; j++) {\n                    for (var k = 0; k < 2; k++) {\n                        V_position2[(i * 4 + j - o) * 2 + k] = V_position[i * 2 + k];\n                        V_angles2[(i * 4 + j) * 2 + k] = V_angles[i * 2 + k];\n                    }\n                    // no offset\n                    for (var k = 0; k < 4; k++) {\n                        V_tangents2[(i * 4 + j - o) * 4 + k] = V_tangents[i * 4 + k];\n                    }\n                }\n            }\n            for (var i = 0, end = n; i < end; i++) {\n                V_texcoord2[(i * 4 + 0) * 2 + 0] = -1;\n                V_texcoord2[(i * 4 + 1) * 2 + 0] = -1;\n                V_texcoord2[(i * 4 + 2) * 2 + 0] = +1;\n                V_texcoord2[(i * 4 + 3) * 2 + 0] = +1;\n                //\n                V_texcoord2[(i * 4 + 0) * 2 + 1] = -1;\n                V_texcoord2[(i * 4 + 1) * 2 + 1] = +1;\n                V_texcoord2[(i * 4 + 2) * 2 + 1] = -1;\n                V_texcoord2[(i * 4 + 3) * 2 + 1] = +1;\n            }\n            // Indices\n            //I = np.resize( np.array([0,1,2,1,2,3], dtype=np.uint32), (n-1)*(2*3))\n            //I += np.repeat( 4*np.arange(n-1), 6)\n            var ni = (n - 1) * 6;\n            this.I_triangles = I = new Uint32Array(ni);\n            // Order of indices is such that drawing as line_strip reveals the line skeleton\n            // Might have implications on culling, if we ever turn that on.\n            // Order in paper was: 0 1 2 1 2 3\n            for (var i = 0, end = n; i < end; i++) {\n                I[i * 6 + 0] = 0 + 4 * i;\n                I[i * 6 + 1] = 1 + 4 * i;\n                I[i * 6 + 2] = 3 + 4 * i;\n                I[i * 6 + 3] = 2 + 4 * i;\n                I[i * 6 + 4] = 0 + 4 * i;\n                I[i * 6 + 5] = 3 + 4 * i;\n            }\n        };\n        LineGLGlyph.prototype._update_scale = function (sx, sy) {\n            // Update segment data and cumsum so the length along the line has the\n            // scale aspect ratio in it. In the vertex shader we multiply with the\n            // \"isotropic part\" of the scale.\n            var V_segment2;\n            var n = this.nvertices;\n            var m = 4 * n - 4;\n            // Prepare arrays\n            var T = this.tangents;\n            var N = new Float32Array(n - 1);\n            var V_segment = new Float32Array(n * 2);\n            // Elements are initialized with 0\n            this.V_segment = V_segment2 = new Float32Array(m * 2);\n            // Calculate vector lengths - with scale aspect ratio taken into account\n            for (var i = 0, end = n - 1; i < end; i++) {\n                N[i] = Math.sqrt(Math.pow(T[i * 2 + 0] * sx, 2) + Math.pow(T[i * 2 + 1] * sy, 2));\n            }\n            // Calculate Segments\n            var cumsum = 0;\n            for (var i = 0, end = n - 1; i < end; i++) {\n                cumsum += N[i];\n                V_segment[(i + 1) * 2 + 0] = cumsum;\n                V_segment[i * 2 + 1] = cumsum;\n            }\n            // Upscale (same loop as in _bake())\n            for (var i = 0, end = n; i < end; i++) {\n                for (var j = 0; j < 4; j++) {\n                    for (var k = 0; k < 2; k++) {\n                        V_segment2[(i * 4 + j) * 2 + k] = V_segment[i * 2 + k];\n                    }\n                }\n            }\n            // Update\n            this.cumsum = cumsum;\n            // L[-1] in Nico's code\n            this.vbo_segment.set_size(this.V_segment.length * 4);\n            return this.vbo_segment.set_data(0, this.V_segment);\n        };\n        return LineGLGlyph;\n    }(base_1.BaseGLGlyph);\n    exports.LineGLGlyph = LineGLGlyph;\n    LineGLGlyph.initClass();    \n}","/*models/glyphs/webgl/line.vert*/\nfunction _(require, module, exports) {\n    exports.vertex_shader = '\\nprecision mediump float;\\n\\nconst float PI = 3.14159265358979323846264;\\nconst float THETA = 15.0 * 3.14159265358979323846264/180.0;\\n\\nuniform float u_pixel_ratio;\\nuniform vec2 u_canvas_size, u_offset;\\nuniform vec2 u_scale_aspect;\\nuniform float u_scale_length;\\n\\nuniform vec4 u_color;\\nuniform float u_antialias;\\nuniform float u_length;\\nuniform float u_linewidth;\\nuniform float u_dash_index;\\nuniform float u_closed;\\n\\nattribute vec2 a_position;\\nattribute vec4 a_tangents;\\nattribute vec2 a_segment;\\nattribute vec2 a_angles;\\nattribute vec2 a_texcoord;\\n\\nvarying vec4  v_color;\\nvarying vec2  v_segment;\\nvarying vec2  v_angles;\\nvarying vec2  v_texcoord;\\nvarying vec2  v_miter;\\nvarying float v_length;\\nvarying float v_linewidth;\\n\\nfloat cross(in vec2 v1, in vec2 v2)\\n{\\n    return v1.x*v2.y - v1.y*v2.x;\\n}\\n\\nfloat signed_distance(in vec2 v1, in vec2 v2, in vec2 v3)\\n{\\n    return cross(v2-v1,v1-v3) / length(v2-v1);\\n}\\n\\nvoid rotate( in vec2 v, in float alpha, out vec2 result )\\n{\\n    float c = cos(alpha);\\n    float s = sin(alpha);\\n    result = vec2( c*v.x - s*v.y,\\n                   s*v.x + c*v.y );\\n}\\n\\nvoid main()\\n{\\n    bool closed = (u_closed > 0.0);\\n\\n    // Attributes and uniforms to varyings\\n    v_color = u_color;\\n    v_linewidth = u_linewidth;\\n    v_segment = a_segment * u_scale_length;\\n    v_length = u_length * u_scale_length;\\n\\n    // Scale to map to pixel coordinates. The original algorithm from the paper\\n    // assumed isotropic scale. We obviously do not have this.\\n    vec2 abs_scale_aspect = abs(u_scale_aspect);\\n    vec2 abs_scale = u_scale_length * abs_scale_aspect;\\n\\n    // Correct angles for aspect ratio\\n    vec2 av;\\n    av = vec2(1.0, tan(a_angles.x)) / abs_scale_aspect;\\n    v_angles.x = atan(av.y, av.x);\\n    av = vec2(1.0, tan(a_angles.y)) / abs_scale_aspect;\\n    v_angles.y = atan(av.y, av.x);\\n\\n    // Thickness below 1 pixel are represented using a 1 pixel thickness\\n    // and a modified alpha\\n    v_color.a = min(v_linewidth, v_color.a);\\n    v_linewidth = max(v_linewidth, 1.0);\\n\\n    // If color is fully transparent we just will discard the fragment anyway\\n    if( v_color.a <= 0.0 ) {\\n        gl_Position = vec4(0.0,0.0,0.0,1.0);\\n        return;\\n    }\\n\\n    // This is the actual half width of the line\\n    float w = ceil(u_antialias+v_linewidth)/2.0;\\n\\n    vec2 position = (a_position + u_offset) * abs_scale;\\n\\n    vec2 t1 = normalize(a_tangents.xy * abs_scale_aspect);  // note the scaling for aspect ratio here\\n    vec2 t2 = normalize(a_tangents.zw * abs_scale_aspect);\\n    float u = a_texcoord.x;\\n    float v = a_texcoord.y;\\n    vec2 o1 = vec2( +t1.y, -t1.x);\\n    vec2 o2 = vec2( +t2.y, -t2.x);\\n\\n    // This is a join\\n    // ----------------------------------------------------------------\\n    if( t1 != t2 ) {\\n        float angle = atan (t1.x*t2.y-t1.y*t2.x, t1.x*t2.x+t1.y*t2.y);  // Angle needs recalculation for some reason\\n        vec2 t  = normalize(t1+t2);\\n        vec2 o  = vec2( + t.y, - t.x);\\n\\n        if ( u_dash_index > 0.0 )\\n        {\\n            // Broken angle\\n            // ----------------------------------------------------------------\\n            if( (abs(angle) > THETA) ) {\\n                position += v * w * o / cos(angle/2.0);\\n                float s = sign(angle);\\n                if( angle < 0.0 ) {\\n                    if( u == +1.0 ) {\\n                        u = v_segment.y + v * w * tan(angle/2.0);\\n                        if( v == 1.0 ) {\\n                            position -= 2.0 * w * t1 / sin(angle);\\n                            u -= 2.0 * w / sin(angle);\\n                        }\\n                    } else {\\n                        u = v_segment.x - v * w * tan(angle/2.0);\\n                        if( v == 1.0 ) {\\n                            position += 2.0 * w * t2 / sin(angle);\\n                            u += 2.0*w / sin(angle);\\n                        }\\n                    }\\n                } else {\\n                    if( u == +1.0 ) {\\n                        u = v_segment.y + v * w * tan(angle/2.0);\\n                        if( v == -1.0 ) {\\n                            position += 2.0 * w * t1 / sin(angle);\\n                            u += 2.0 * w / sin(angle);\\n                        }\\n                    } else {\\n                        u = v_segment.x - v * w * tan(angle/2.0);\\n                        if( v == -1.0 ) {\\n                            position -= 2.0 * w * t2 / sin(angle);\\n                            u -= 2.0*w / sin(angle);\\n                        }\\n                    }\\n                }\\n                // Continuous angle\\n                // ------------------------------------------------------------\\n            } else {\\n                position += v * w * o / cos(angle/2.0);\\n                if( u == +1.0 ) u = v_segment.y;\\n                else            u = v_segment.x;\\n            }\\n        }\\n\\n        // Solid line\\n        // --------------------------------------------------------------------\\n        else\\n        {\\n            position.xy += v * w * o / cos(angle/2.0);\\n            if( angle < 0.0 ) {\\n                if( u == +1.0 ) {\\n                    u = v_segment.y + v * w * tan(angle/2.0);\\n                } else {\\n                    u = v_segment.x - v * w * tan(angle/2.0);\\n                }\\n            } else {\\n                if( u == +1.0 ) {\\n                    u = v_segment.y + v * w * tan(angle/2.0);\\n                } else {\\n                    u = v_segment.x - v * w * tan(angle/2.0);\\n                }\\n            }\\n        }\\n\\n    // This is a line start or end (t1 == t2)\\n    // ------------------------------------------------------------------------\\n    } else {\\n        position += v * w * o1;\\n        if( u == -1.0 ) {\\n            u = v_segment.x - w;\\n            position -= w * t1;\\n        } else {\\n            u = v_segment.y + w;\\n            position += w * t2;\\n        }\\n    }\\n\\n    // Miter distance\\n    // ------------------------------------------------------------------------\\n    vec2 t;\\n    vec2 curr = a_position * abs_scale;\\n    if( a_texcoord.x < 0.0 ) {\\n        vec2 next = curr + t2*(v_segment.y-v_segment.x);\\n\\n        rotate( t1, +v_angles.x/2.0, t);\\n        v_miter.x = signed_distance(curr, curr+t, position);\\n\\n        rotate( t2, +v_angles.y/2.0, t);\\n        v_miter.y = signed_distance(next, next+t, position);\\n    } else {\\n        vec2 prev = curr - t1*(v_segment.y-v_segment.x);\\n\\n        rotate( t1, -v_angles.x/2.0,t);\\n        v_miter.x = signed_distance(prev, prev+t, position);\\n\\n        rotate( t2, -v_angles.y/2.0,t);\\n        v_miter.y = signed_distance(curr, curr+t, position);\\n    }\\n\\n    if (!closed && v_segment.x <= 0.0) {\\n        v_miter.x = 1e10;\\n    }\\n    if (!closed && v_segment.y >= v_length)\\n    {\\n        v_miter.y = 1e10;\\n    }\\n\\n    v_texcoord = vec2( u, v*w );\\n\\n    // Calculate position in device coordinates. Note that we\\n    // already scaled with abs scale above.\\n    vec2 normpos = position * sign(u_scale_aspect);\\n    normpos += 0.5;  // make up for Bokeh\\'s offset\\n    normpos /= u_canvas_size / u_pixel_ratio;  // in 0..1\\n    gl_Position = vec4(normpos*2.0-1.0, 0.0, 1.0);\\n    gl_Position.y *= -1.0;\\n}\\n';    \n}","/*models/glyphs/webgl/main*/\nfunction _(require, module, exports) {\n    require(430    /* ./index */);    \n}","/*models/glyphs/webgl/markers*/\nfunction _(require, module, exports) {\n    var tslib_1 = require(369    /* tslib */);\n    /* XXX: partial */\n    var gloo2_1 = require(436    /* gloo2 */);\n    var base_1 = require(429    /* ./base */);\n    var logging_1 = require(14    /* core/logging */);\n    var MarkerGLGlyph = function (_super) {\n        tslib_1.__extends(MarkerGLGlyph, _super);\n        function MarkerGLGlyph() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MarkerGLGlyph.initClass = function () {\n            // Base class for markers. All markers share the same GLSL, except for one\n            // function that defines the marker geometry.\n            this.prototype.VERT = 'precision mediump float;\\nconst float SQRT_2 = 1.4142135623730951;\\n//\\nuniform float u_pixel_ratio;\\nuniform vec2 u_canvas_size;\\nuniform vec2 u_offset;\\nuniform vec2 u_scale;\\nuniform float u_antialias;\\n//\\nattribute float a_x;\\nattribute float a_y;\\nattribute float a_size;\\nattribute float a_angle;  // in radians\\nattribute float a_linewidth;\\nattribute vec4  a_fg_color;\\nattribute vec4  a_bg_color;\\n//\\nvarying float v_linewidth;\\nvarying float v_size;\\nvarying vec4  v_fg_color;\\nvarying vec4  v_bg_color;\\nvarying vec2  v_rotation;\\n\\nvoid main (void)\\n{\\n    v_size = a_size * u_pixel_ratio;\\n    v_linewidth = a_linewidth * u_pixel_ratio;\\n    v_fg_color = a_fg_color;\\n    v_bg_color = a_bg_color;\\n    v_rotation = vec2(cos(-a_angle), sin(-a_angle));\\n    // Calculate position - the -0.5 is to correct for canvas origin\\n    vec2 pos = (vec2(a_x, a_y) + u_offset) * u_scale; // in pixels\\n    pos += 0.5;  // make up for Bokeh\\'s offset\\n    pos /= u_canvas_size / u_pixel_ratio;  // in 0..1\\n    gl_Position = vec4(pos*2.0-1.0, 0.0, 1.0);\\n    gl_Position.y *= -1.0;\\n    gl_PointSize = SQRT_2 * v_size + 2.0 * (v_linewidth + 1.5*u_antialias);\\n}';\n            this.prototype.FRAG = 'precision mediump float;\\nconst float SQRT_2 = 1.4142135623730951;\\nconst float PI = 3.14159265358979323846264;\\n//\\nuniform float u_antialias;\\n//\\nvarying vec4  v_fg_color;\\nvarying vec4  v_bg_color;\\nvarying float v_linewidth;\\nvarying float v_size;\\nvarying vec2  v_rotation;\\n\\nMARKERCODE\\n\\nvec4 outline(float distance, float linewidth, float antialias, vec4 fg_color, vec4 bg_color)\\n{\\n    vec4 frag_color;\\n    float t = linewidth/2.0 - antialias;\\n    float signed_distance = distance;\\n    float border_distance = abs(signed_distance) - t;\\n    float alpha = border_distance/antialias;\\n    alpha = exp(-alpha*alpha);\\n\\n    // If fg alpha is zero, it probably means no outline. To avoid a dark outline\\n    // shining through due to aa, we set the fg color to the bg color. Avoid if (i.e. branching).\\n    float select = float(bool(fg_color.a));\\n    fg_color.rgb = select * fg_color.rgb + (1.0  - select) * bg_color.rgb;\\n    // Similarly, if we want a transparent bg\\n    select = float(bool(bg_color.a));\\n    bg_color.rgb = select * bg_color.rgb + (1.0  - select) * fg_color.rgb;\\n\\n    if( border_distance < 0.0)\\n        frag_color = fg_color;\\n    else if( signed_distance < 0.0 ) {\\n        frag_color = mix(bg_color, fg_color, sqrt(alpha));\\n    } else {\\n        if( abs(signed_distance) < (linewidth/2.0 + antialias) ) {\\n            frag_color = vec4(fg_color.rgb, fg_color.a * alpha);\\n        } else {\\n            discard;\\n        }\\n    }\\n    return frag_color;\\n}\\n\\nvoid main()\\n{\\n    vec2 P = gl_PointCoord.xy - vec2(0.5, 0.5);\\n    P = vec2(v_rotation.x*P.x - v_rotation.y*P.y,\\n             v_rotation.y*P.x + v_rotation.x*P.y);\\n    float point_size = SQRT_2*v_size  + 2.0 * (v_linewidth + 1.5*u_antialias);\\n    float distance = marker(P*point_size, v_size);\\n    gl_FragColor = outline(distance, v_linewidth, u_antialias, v_fg_color, v_bg_color);\\n    //gl_FragColor.rgb *= gl_FragColor.a;  // pre-multiply alpha\\n}';\n            this.prototype.MARKERCODE = '<defined in subclasses>';\n        };\n        MarkerGLGlyph.prototype.init = function () {\n            var gl = this.gl;\n            var frag = this.FRAG.replace(/MARKERCODE/, this.MARKERCODE);\n            this.last_trans = {};\n            // Keep track of transform\n            // The program\n            this.prog = new gloo2_1.Program(gl);\n            this.prog.set_shaders(this.VERT, frag);\n            // Real attributes\n            this.vbo_x = new gloo2_1.VertexBuffer(gl);\n            this.prog.set_attribute('a_x', 'float', this.vbo_x);\n            this.vbo_y = new gloo2_1.VertexBuffer(gl);\n            this.prog.set_attribute('a_y', 'float', this.vbo_y);\n            this.vbo_s = new gloo2_1.VertexBuffer(gl);\n            this.prog.set_attribute('a_size', 'float', this.vbo_s);\n            this.vbo_a = new gloo2_1.VertexBuffer(gl);\n            this.prog.set_attribute('a_angle', 'float', this.vbo_a);\n            // VBO's for attributes (they may not be used if value is singleton)\n            this.vbo_linewidth = new gloo2_1.VertexBuffer(gl);\n            this.vbo_fg_color = new gloo2_1.VertexBuffer(gl);\n            this.vbo_bg_color = new gloo2_1.VertexBuffer(gl);\n            return this.index_buffer = new gloo2_1.IndexBuffer(gl);\n        };\n        MarkerGLGlyph.prototype.draw = function (indices, mainGlyph, trans) {\n            // The main glyph has the data, *this* glyph has the visuals.\n            var mainGlGlyph = mainGlyph.glglyph;\n            var nvertices = mainGlGlyph.nvertices;\n            // Upload data if we must. Only happens for main glyph.\n            if (mainGlGlyph.data_changed) {\n                if (!(isFinite(trans.dx) && isFinite(trans.dy))) {\n                    return;    // not sure why, but it happens on init sometimes (#4367)\n                }\n                mainGlGlyph._baked_offset = [\n                    trans.dx,\n                    trans.dy\n                ];\n                // float32 precision workaround; used in _set_data() and below\n                mainGlGlyph._set_data(nvertices);\n                mainGlGlyph.data_changed = false;\n            } else if (this.glyph._radius != null && (trans.sx !== this.last_trans.sx || trans.sy !== this.last_trans.sy)) {\n                // Keep screen radius up-to-date for circle glyph. Only happens when a radius is given\n                this.last_trans = trans;\n                this.vbo_s.set_data(0, new Float32Array(this.glyph.sradius.map(function (s) {\n                    return s * 2;\n                })));\n            }\n            // Update visuals if we must. Can happen for all glyphs.\n            if (this.visuals_changed) {\n                this._set_visuals(nvertices);\n                this.visuals_changed = false;\n            }\n            // Handle transformation to device coordinates\n            // Note the baked-in offset to avoid float32 precision problems\n            var baked_offset = mainGlGlyph._baked_offset;\n            this.prog.set_uniform('u_pixel_ratio', 'float', [trans.pixel_ratio]);\n            this.prog.set_uniform('u_canvas_size', 'vec2', [\n                trans.width,\n                trans.height\n            ]);\n            this.prog.set_uniform('u_offset', 'vec2', [\n                trans.dx - baked_offset[0],\n                trans.dy - baked_offset[1]\n            ]);\n            this.prog.set_uniform('u_scale', 'vec2', [\n                trans.sx,\n                trans.sy\n            ]);\n            // Select buffers from main glyph\n            // (which may be this glyph but maybe not if this is a (non)selection glyph)\n            this.prog.set_attribute('a_x', 'float', mainGlGlyph.vbo_x);\n            this.prog.set_attribute('a_y', 'float', mainGlGlyph.vbo_y);\n            this.prog.set_attribute('a_size', 'float', mainGlGlyph.vbo_s);\n            this.prog.set_attribute('a_angle', 'float', mainGlGlyph.vbo_a);\n            // Draw directly or using indices. Do not handle indices if they do not\n            // fit in a uint16; WebGL 1.0 does not support uint32.\n            if (indices.length === 0) {\n                return;\n            } else if (indices.length === nvertices) {\n                return this.prog.draw(this.gl.POINTS, [\n                    0,\n                    nvertices\n                ]);\n            } else if (nvertices < 65535) {\n                // On IE the marker size is reduced to 1 px when using an index buffer\n                // A MS Edge dev on Twitter said on 24-04-2014: \"gl_PointSize > 1.0 works\n                // in DrawArrays; gl_PointSize > 1.0 in DrawElements is coming soon in the\n                // next renderer update.\n                var ua = window.navigator.userAgent;\n                if (ua.indexOf('MSIE ') + ua.indexOf('Trident/') + ua.indexOf('Edge/') > 0) {\n                    logging_1.logger.warn('WebGL warning: IE is known to produce 1px sprites whith selections.');\n                }\n                this.index_buffer.set_size(indices.length * 2);\n                this.index_buffer.set_data(0, new Uint16Array(indices));\n                return this.prog.draw(this.gl.POINTS, this.index_buffer);\n            } else {\n                // Work around the limit that the indexbuffer must be uint16. We draw in chunks.\n                // First collect indices in chunks\n                var chunksize = 64000;\n                // 65536\n                var chunks = [];\n                for (var i = 0, end = Math.ceil(nvertices / chunksize); i < end; i++) {\n                    chunks.push([]);\n                }\n                for (var i = 0, end = indices.length; i < end; i++) {\n                    var uint16_index = indices[i] % chunksize;\n                    var chunk = Math.floor(indices[i] / chunksize);\n                    chunks[chunk].push(uint16_index);\n                }\n                // Then draw each chunk\n                for (var chunk = 0, end = chunks.length; chunk < end; chunk++) {\n                    var these_indices = new Uint16Array(chunks[chunk]);\n                    var offset = chunk * chunksize * 4;\n                    if (these_indices.length === 0) {\n                        continue;\n                    }\n                    this.prog.set_attribute('a_x', 'float', mainGlGlyph.vbo_x, 0, offset);\n                    this.prog.set_attribute('a_y', 'float', mainGlGlyph.vbo_y, 0, offset);\n                    this.prog.set_attribute('a_size', 'float', mainGlGlyph.vbo_s, 0, offset);\n                    this.prog.set_attribute('a_angle', 'float', mainGlGlyph.vbo_a, 0, offset);\n                    if (this.vbo_linewidth.used) {\n                        this.prog.set_attribute('a_linewidth', 'float', this.vbo_linewidth, 0, offset);\n                    }\n                    if (this.vbo_fg_color.used) {\n                        this.prog.set_attribute('a_fg_color', 'vec4', this.vbo_fg_color, 0, offset * 4);\n                    }\n                    if (this.vbo_bg_color.used) {\n                        this.prog.set_attribute('a_bg_color', 'vec4', this.vbo_bg_color, 0, offset * 4);\n                    }\n                    // The actual drawing\n                    this.index_buffer.set_size(these_indices.length * 2);\n                    this.index_buffer.set_data(0, these_indices);\n                    this.prog.draw(this.gl.POINTS, this.index_buffer);\n                }\n            }\n        };\n        MarkerGLGlyph.prototype._set_data = function (nvertices) {\n            var n = nvertices * 4;\n            // in bytes\n            // Set buffer size\n            this.vbo_x.set_size(n);\n            this.vbo_y.set_size(n);\n            this.vbo_a.set_size(n);\n            this.vbo_s.set_size(n);\n            // Upload data for x and y, apply a baked-in offset for float32 precision (issue #3795)\n            // The exact value for the baked_offset does not matter, as long as it brings the data to less extreme values\n            var xx = new Float64Array(this.glyph._x);\n            var yy = new Float64Array(this.glyph._y);\n            for (var i = 0, end = nvertices; i < end; i++) {\n                xx[i] += this._baked_offset[0];\n                yy[i] += this._baked_offset[1];\n            }\n            this.vbo_x.set_data(0, new Float32Array(xx));\n            this.vbo_y.set_data(0, new Float32Array(yy));\n            // Angle if available; circle does not have angle. If we don't set data, angle is default 0 in glsl\n            if (this.glyph._angle != null) {\n                this.vbo_a.set_data(0, new Float32Array(this.glyph._angle));\n            }\n            // Radius is special; some markes allow radius in data-coords instead of screen coords\n            // @radius tells us that radius is in units, sradius is the pre-calculated screen radius\n            if (this.glyph._radius != null) {\n                return this.vbo_s.set_data(0, new Float32Array(this.glyph.sradius.map(function (s) {\n                    return s * 2;\n                })));\n            } else {\n                return this.vbo_s.set_data(0, new Float32Array(this.glyph._size));\n            }\n        };\n        MarkerGLGlyph.prototype._set_visuals = function (nvertices) {\n            base_1.attach_float(this.prog, this.vbo_linewidth, 'a_linewidth', nvertices, this.glyph.visuals.line, 'line_width');\n            base_1.attach_color(this.prog, this.vbo_fg_color, 'a_fg_color', nvertices, this.glyph.visuals.line, 'line');\n            base_1.attach_color(this.prog, this.vbo_bg_color, 'a_bg_color', nvertices, this.glyph.visuals.fill, 'fill');\n            // Static value for antialias. Smaller aa-region to obtain crisper images\n            return this.prog.set_uniform('u_antialias', 'float', [0.8]);\n        };\n        return MarkerGLGlyph;\n    }(base_1.BaseGLGlyph);\n    exports.MarkerGLGlyph = MarkerGLGlyph;\n    MarkerGLGlyph.initClass();\n    var CircleGLGlyph = function (_super) {\n        tslib_1.__extends(CircleGLGlyph, _super);\n        function CircleGLGlyph() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        CircleGLGlyph.initClass = function () {\n            this.prototype.GLYPH = 'circle';\n            this.prototype.MARKERCODE = '// --- disc\\nfloat marker(vec2 P, float size)\\n{\\n    return length(P) - size/2.0;\\n}';\n        };\n        return CircleGLGlyph;\n    }(MarkerGLGlyph);\n    exports.CircleGLGlyph = CircleGLGlyph;\n    CircleGLGlyph.initClass();\n    var SquareGLGlyph = function (_super) {\n        tslib_1.__extends(SquareGLGlyph, _super);\n        function SquareGLGlyph() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        SquareGLGlyph.initClass = function () {\n            this.prototype.GLYPH = 'square';\n            this.prototype.MARKERCODE = '// --- square\\nfloat marker(vec2 P, float size)\\n{\\n    return max(abs(P.x), abs(P.y)) - size/2.0;\\n}';\n        };\n        return SquareGLGlyph;\n    }(MarkerGLGlyph);\n    exports.SquareGLGlyph = SquareGLGlyph;\n    SquareGLGlyph.initClass();\n    var AnnulusGLGlyph = function (_super) {\n        tslib_1.__extends(AnnulusGLGlyph, _super);\n        function AnnulusGLGlyph() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        AnnulusGLGlyph.initClass = function () {\n            this.prototype.GLYPH = 'annulus';\n            this.prototype.MARKERCODE = 'float marker(vec2 P, float size)\\n{\\n    float r1 = length(P) - size/2.0;\\n    float r2 = length(P) - size/4.0;  // half width\\n    return max(r1, -r2);\\n}';\n        };\n        return AnnulusGLGlyph;\n    }(MarkerGLGlyph);\n    exports.AnnulusGLGlyph = AnnulusGLGlyph;\n    AnnulusGLGlyph.initClass();\n    var DiamondGLGlyph = function (_super) {\n        tslib_1.__extends(DiamondGLGlyph, _super);\n        function DiamondGLGlyph() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        DiamondGLGlyph.initClass = function () {\n            this.prototype.GLYPH = 'diamond';\n            this.prototype.MARKERCODE = '// --- diamond\\nfloat marker(vec2 P, float size)\\n{\\n    float x = SQRT_2 / 2.0 * (P.x * 1.5 - P.y);\\n    float y = SQRT_2 / 2.0 * (P.x * 1.5 + P.y);\\n    float r1 = max(abs(x), abs(y)) - size / (2.0 * SQRT_2);\\n    return r1 / SQRT_2;\\n}';\n        };\n        return DiamondGLGlyph;\n    }(MarkerGLGlyph);\n    exports.DiamondGLGlyph = DiamondGLGlyph;\n    DiamondGLGlyph.initClass();\n    var TriangleGLGlyph = function (_super) {\n        tslib_1.__extends(TriangleGLGlyph, _super);\n        function TriangleGLGlyph() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        TriangleGLGlyph.initClass = function () {\n            this.prototype.GLYPH = 'triangle';\n            this.prototype.MARKERCODE = 'float marker(vec2 P, float size)\\n{\\n    P.y -= size * 0.3;\\n    float x = SQRT_2 / 2.0 * (P.x * 1.7 - P.y);\\n    float y = SQRT_2 / 2.0 * (P.x * 1.7 + P.y);\\n    float r1 = max(abs(x), abs(y)) - size / 1.6;\\n    float r2 = P.y;\\n    return max(r1 / SQRT_2, r2);  // Instersect diamond with rectangle\\n}';\n        };\n        return TriangleGLGlyph;\n    }(MarkerGLGlyph);\n    exports.TriangleGLGlyph = TriangleGLGlyph;\n    TriangleGLGlyph.initClass();\n    var InvertedTriangleGLGlyph = function (_super) {\n        tslib_1.__extends(InvertedTriangleGLGlyph, _super);\n        function InvertedTriangleGLGlyph() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        InvertedTriangleGLGlyph.initClass = function () {\n            this.prototype.GLYPH = 'invertedtriangle';\n            this.prototype.MARKERCODE = 'float marker(vec2 P, float size)\\n{\\n    P.y += size * 0.3;\\n    float x = SQRT_2 / 2.0 * (P.x * 1.7 - P.y);\\n    float y = SQRT_2 / 2.0 * (P.x * 1.7 + P.y);\\n    float r1 = max(abs(x), abs(y)) - size / 1.6;\\n    float r2 = - P.y;\\n    return max(r1 / SQRT_2, r2);  // Instersect diamond with rectangle\\n}';\n        };\n        return InvertedTriangleGLGlyph;\n    }(MarkerGLGlyph);\n    exports.InvertedTriangleGLGlyph = InvertedTriangleGLGlyph;\n    InvertedTriangleGLGlyph.initClass();\n    var CrossGLGlyph = function (_super) {\n        tslib_1.__extends(CrossGLGlyph, _super);\n        function CrossGLGlyph() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        CrossGLGlyph.initClass = function () {\n            this.prototype.GLYPH = 'cross';\n            this.prototype.MARKERCODE = 'float marker(vec2 P, float size)\\n{\\n    float square = max(abs(P.x), abs(P.y)) - size / 2.5;  // 2.5 is a tweak\\n    float cross = min(abs(P.x), abs(P.y)) - size / 100.0;  // bit of \"width\" for aa\\n    return max(square, cross);\\n}';\n        };\n        return CrossGLGlyph;\n    }(MarkerGLGlyph);\n    exports.CrossGLGlyph = CrossGLGlyph;\n    CrossGLGlyph.initClass();\n    var CircleCrossGLGlyph = function (_super) {\n        tslib_1.__extends(CircleCrossGLGlyph, _super);\n        function CircleCrossGLGlyph() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        CircleCrossGLGlyph.initClass = function () {\n            this.prototype.GLYPH = 'circlecross';\n            this.prototype.MARKERCODE = 'float marker(vec2 P, float size)\\n{\\n    // Define quadrants\\n    float qs = size / 2.0;  // quadrant size\\n    float s1 = max(abs(P.x - qs), abs(P.y - qs)) - qs;\\n    float s2 = max(abs(P.x + qs), abs(P.y - qs)) - qs;\\n    float s3 = max(abs(P.x - qs), abs(P.y + qs)) - qs;\\n    float s4 = max(abs(P.x + qs), abs(P.y + qs)) - qs;\\n    // Intersect main shape with quadrants (to form cross)\\n    float circle = length(P) - size/2.0;\\n    float c1 = max(circle, s1);\\n    float c2 = max(circle, s2);\\n    float c3 = max(circle, s3);\\n    float c4 = max(circle, s4);\\n    // Union\\n    return min(min(min(c1, c2), c3), c4);\\n}';\n        };\n        return CircleCrossGLGlyph;\n    }(MarkerGLGlyph);\n    exports.CircleCrossGLGlyph = CircleCrossGLGlyph;\n    CircleCrossGLGlyph.initClass();\n    var SquareCrossGLGlyph = function (_super) {\n        tslib_1.__extends(SquareCrossGLGlyph, _super);\n        function SquareCrossGLGlyph() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        SquareCrossGLGlyph.initClass = function () {\n            this.prototype.GLYPH = 'squarecross';\n            this.prototype.MARKERCODE = 'float marker(vec2 P, float size)\\n{\\n    // Define quadrants\\n    float qs = size / 2.0;  // quadrant size\\n    float s1 = max(abs(P.x - qs), abs(P.y - qs)) - qs;\\n    float s2 = max(abs(P.x + qs), abs(P.y - qs)) - qs;\\n    float s3 = max(abs(P.x - qs), abs(P.y + qs)) - qs;\\n    float s4 = max(abs(P.x + qs), abs(P.y + qs)) - qs;\\n    // Intersect main shape with quadrants (to form cross)\\n    float square = max(abs(P.x), abs(P.y)) - size/2.0;\\n    float c1 = max(square, s1);\\n    float c2 = max(square, s2);\\n    float c3 = max(square, s3);\\n    float c4 = max(square, s4);\\n    // Union\\n    return min(min(min(c1, c2), c3), c4);\\n}';\n        };\n        return SquareCrossGLGlyph;\n    }(MarkerGLGlyph);\n    exports.SquareCrossGLGlyph = SquareCrossGLGlyph;\n    SquareCrossGLGlyph.initClass();\n    var DiamondCrossGLGlyph = function (_super) {\n        tslib_1.__extends(DiamondCrossGLGlyph, _super);\n        function DiamondCrossGLGlyph() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        DiamondCrossGLGlyph.initClass = function () {\n            this.prototype.GLYPH = 'diamondcross';\n            this.prototype.MARKERCODE = 'float marker(vec2 P, float size)\\n{\\n    // Define quadrants\\n    float qs = size / 2.0;  // quadrant size\\n    float s1 = max(abs(P.x - qs), abs(P.y - qs)) - qs;\\n    float s2 = max(abs(P.x + qs), abs(P.y - qs)) - qs;\\n    float s3 = max(abs(P.x - qs), abs(P.y + qs)) - qs;\\n    float s4 = max(abs(P.x + qs), abs(P.y + qs)) - qs;\\n    // Intersect main shape with quadrants (to form cross)\\n    float x = SQRT_2 / 2.0 * (P.x * 1.5 - P.y);\\n    float y = SQRT_2 / 2.0 * (P.x * 1.5 + P.y);\\n    float diamond = max(abs(x), abs(y)) - size / (2.0 * SQRT_2);\\n    diamond /= SQRT_2;\\n    float c1 = max(diamond, s1);\\n    float c2 = max(diamond, s2);\\n    float c3 = max(diamond, s3);\\n    float c4 = max(diamond, s4);\\n    // Union\\n    return min(min(min(c1, c2), c3), c4);\\n}';\n        };\n        return DiamondCrossGLGlyph;\n    }(MarkerGLGlyph);\n    exports.DiamondCrossGLGlyph = DiamondCrossGLGlyph;\n    DiamondCrossGLGlyph.initClass();\n    var XGLGlyph = function (_super) {\n        tslib_1.__extends(XGLGlyph, _super);\n        function XGLGlyph() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        XGLGlyph.initClass = function () {\n            this.prototype.GLYPH = 'x';\n            this.prototype.MARKERCODE = 'float marker(vec2 P, float size)\\n{\\n    float circle = length(P) - size / 1.6;\\n    float X = min(abs(P.x - P.y), abs(P.x + P.y)) - size / 100.0;  // bit of \"width\" for aa\\n    return max(circle, X);\\n}';\n        };\n        return XGLGlyph;\n    }(MarkerGLGlyph);\n    exports.XGLGlyph = XGLGlyph;\n    XGLGlyph.initClass();\n    var CircleXGLGlyph = function (_super) {\n        tslib_1.__extends(CircleXGLGlyph, _super);\n        function CircleXGLGlyph() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        CircleXGLGlyph.initClass = function () {\n            this.prototype.GLYPH = 'circlex';\n            this.prototype.MARKERCODE = 'float marker(vec2 P, float size)\\n{\\n    float x = P.x - P.y;\\n    float y = P.x + P.y;\\n    // Define quadrants\\n    float qs = size / 2.0;  // quadrant size\\n    float s1 = max(abs(x - qs), abs(y - qs)) - qs;\\n    float s2 = max(abs(x + qs), abs(y - qs)) - qs;\\n    float s3 = max(abs(x - qs), abs(y + qs)) - qs;\\n    float s4 = max(abs(x + qs), abs(y + qs)) - qs;\\n    // Intersect main shape with quadrants (to form cross)\\n    float circle = length(P) - size/2.0;\\n    float c1 = max(circle, s1);\\n    float c2 = max(circle, s2);\\n    float c3 = max(circle, s3);\\n    float c4 = max(circle, s4);\\n    // Union\\n    float almost = min(min(min(c1, c2), c3), c4);\\n    // In this case, the X is also outside of the main shape\\n    float Xmask = length(P) - size / 1.6;  // a circle\\n    float X = min(abs(P.x - P.y), abs(P.x + P.y)) - size / 100.0;  // bit of \"width\" for aa\\n    return min(max(X, Xmask), almost);\\n}';\n        };\n        return CircleXGLGlyph;\n    }(MarkerGLGlyph);\n    exports.CircleXGLGlyph = CircleXGLGlyph;\n    CircleXGLGlyph.initClass();\n    var SquareXGLGlyph = function (_super) {\n        tslib_1.__extends(SquareXGLGlyph, _super);\n        function SquareXGLGlyph() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        SquareXGLGlyph.initClass = function () {\n            this.prototype.GLYPH = 'squarex';\n            this.prototype.MARKERCODE = 'float marker(vec2 P, float size)\\n{\\n    float x = P.x - P.y;\\n    float y = P.x + P.y;\\n    // Define quadrants\\n    float qs = size / 2.0;  // quadrant size\\n    float s1 = max(abs(x - qs), abs(y - qs)) - qs;\\n    float s2 = max(abs(x + qs), abs(y - qs)) - qs;\\n    float s3 = max(abs(x - qs), abs(y + qs)) - qs;\\n    float s4 = max(abs(x + qs), abs(y + qs)) - qs;\\n    // Intersect main shape with quadrants (to form cross)\\n    float square = max(abs(P.x), abs(P.y)) - size/2.0;\\n    float c1 = max(square, s1);\\n    float c2 = max(square, s2);\\n    float c3 = max(square, s3);\\n    float c4 = max(square, s4);\\n    // Union\\n    return min(min(min(c1, c2), c3), c4);\\n}';\n        };\n        return SquareXGLGlyph;\n    }(MarkerGLGlyph);\n    exports.SquareXGLGlyph = SquareXGLGlyph;\n    SquareXGLGlyph.initClass();\n    var AsteriskGLGlyph = function (_super) {\n        tslib_1.__extends(AsteriskGLGlyph, _super);\n        function AsteriskGLGlyph() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        AsteriskGLGlyph.initClass = function () {\n            this.prototype.GLYPH = 'asterisk';\n            this.prototype.MARKERCODE = 'float marker(vec2 P, float size)\\n{\\n    // Masks\\n    float diamond = max(abs(SQRT_2 / 2.0 * (P.x - P.y)), abs(SQRT_2 / 2.0 * (P.x + P.y))) - size / (2.0 * SQRT_2);\\n    float square = max(abs(P.x), abs(P.y)) - size / (2.0 * SQRT_2);\\n    // Shapes\\n    float X = min(abs(P.x - P.y), abs(P.x + P.y)) - size / 100.0;  // bit of \"width\" for aa\\n    float cross = min(abs(P.x), abs(P.y)) - size / 100.0;  // bit of \"width\" for aa\\n    // Result is union of masked shapes\\n    return min(max(X, diamond), max(cross, square));\\n}';\n        };\n        return AsteriskGLGlyph;\n    }(MarkerGLGlyph);\n    exports.AsteriskGLGlyph = AsteriskGLGlyph;\n    AsteriskGLGlyph.initClass();    \n}","/* Do not edit, autogenerated by flexx.pyscript */\n/*gloo2/gloo2*/\nfunction _(require, module, exports) {\n    var _pyfunc_add = function (a, b) {\n        // nargs: 2\n        if (Array.isArray(a) && Array.isArray(b)) {\n            return a.concat(b);\n        }\n        return a + b;\n    };\n    var _pyfunc_all = function (x) {\n        // nargs: 1\n        for (var i = 0; i < x.length; i++) {\n            if (!_pyfunc_truthy(x[i])) {\n                return false;\n            }\n        }\n        return true;\n    };\n    var _pyfunc_contains = function contains(a, b) {\n        // nargs: 2\n        if (b == null) {\n        } else if (Array.isArray(b)) {\n            for (var i = 0; i < b.length; i++) {\n                if (_pyfunc_equals(a, b[i]))\n                    return true;\n            }\n            return false;\n        } else if (b.constructor === Object) {\n            for (var k in b) {\n                if (a == k)\n                    return true;\n            }\n            return false;\n        } else if (b.constructor == String) {\n            return b.indexOf(a) >= 0;\n        }\n        var e = Error('Not a container: ' + b);\n        e.name = 'TypeError';\n        throw e;\n    };\n    var _pyfunc_equals = function equals(a, b) {\n        // nargs: 2\n        if (a == null || b == null) {\n        } else if (Array.isArray(a) && Array.isArray(b)) {\n            var i = 0, iseq = a.length == b.length;\n            while (iseq && i < a.length) {\n                iseq = equals(a[i], b[i]);\n                i += 1;\n            }\n            return iseq;\n        } else if (a.constructor === Object && b.constructor === Object) {\n            var akeys = Object.keys(a), bkeys = Object.keys(b);\n            akeys.sort();\n            bkeys.sort();\n            var i = 0, k, iseq = equals(akeys, bkeys);\n            while (iseq && i < akeys.length) {\n                k = akeys[i];\n                iseq = equals(a[k], b[k]);\n                i += 1;\n            }\n            return iseq;\n        }\n        return a == b;\n    };\n    var _pyfunc_instantiate = function (ob, args) {\n        // nargs: 2\n        if (typeof ob === 'undefined' || typeof window !== 'undefined' && window === ob || typeof global !== 'undefined' && global === ob) {\n            throw 'Class constructor is called as a function.';\n        }\n        for (var name in ob) {\n            if (Object[name] === undefined && typeof ob[name] === 'function' && !ob[name].nobind) {\n                ob[name] = ob[name].bind(ob);\n            }\n        }\n        if (ob.__init__) {\n            ob.__init__.apply(ob, args);\n        }\n    };\n    var _pyfunc_mult = function (a, b) {\n        // nargs: 2\n        if ((typeof a === 'number') + (typeof b === 'number') === 1) {\n            if (a.constructor === String)\n                return _pymeth_repeat.call(a, b);\n            if (b.constructor === String)\n                return _pymeth_repeat.call(b, a);\n            if (Array.isArray(b)) {\n                var t = a;\n                a = b;\n                b = t;\n            }\n            if (Array.isArray(a)) {\n                var res = [];\n                for (var i = 0; i < b; i++)\n                    res = res.concat(a);\n                return res;\n            }\n        }\n        return a * b;\n    };\n    var _pyfunc_range = function (start, end, step) {\n        var i, res = [];\n        var val = start;\n        var n = (end - start) / step;\n        for (i = 0; i < n; i++) {\n            res.push(val);\n            val += step;\n        }\n        return res;\n    };\n    var _pyfunc_truthy = function (v) {\n        if (v === null || typeof v !== 'object') {\n            return v;\n        } else if (v.length !== undefined) {\n            return v.length ? v : false;\n        } else if (v.byteLength !== undefined) {\n            return v.byteLength ? v : false;\n        } else if (v.constructor !== Object) {\n            return true;\n        } else {\n            return Object.getOwnPropertyNames(v).length ? v : false;\n        }\n    };\n    var _pymeth_append = function (x) {\n        // nargs: 1\n        if (!Array.isArray(this))\n            return this.append.apply(this, arguments);\n        this.push(x);\n    };\n    var _pymeth_get = function (key, d) {\n        // nargs: 1 2\n        if (this.constructor !== Object)\n            return this.get.apply(this, arguments);\n        if (this[key] !== undefined) {\n            return this[key];\n        } else if (d !== undefined) {\n            return d;\n        } else {\n            return null;\n        }\n    };\n    var _pymeth_keys = function () {\n        // nargs: 0\n        if (typeof this['keys'] === 'function')\n            return this.keys.apply(this, arguments);\n        return Object.keys(this);\n    };\n    var _pymeth_lstrip = function (chars) {\n        // nargs: 0 1\n        if (this.constructor !== String)\n            return this.lstrip.apply(this, arguments);\n        chars = chars === undefined ? ' \\t\\r\\n' : chars;\n        for (var i = 0; i < this.length; i++) {\n            if (chars.indexOf(this[i]) < 0)\n                return this.slice(i);\n        }\n        return '';\n    };\n    var _pymeth_remove = function (x) {\n        // nargs: 1\n        if (!Array.isArray(this))\n            return this.remove.apply(this, arguments);\n        for (var i = 0; i < this.length; i++) {\n            if (_pyfunc_equals(this[i], x)) {\n                this.splice(i, 1);\n                return;\n            }\n        }\n        var e = Error(x);\n        e.name = 'ValueError';\n        throw e;\n    };\n    var _pymeth_repeat = function (count) {\n        // nargs: 0\n        if (this.repeat)\n            return this.repeat(count);\n        if (count < 1)\n            return '';\n        var result = '', pattern = this.valueOf();\n        while (count > 1) {\n            if (count & 1)\n                result += pattern;\n            count >>= 1, pattern += pattern;\n        }\n        return result + pattern;\n    };\n    var _pymeth_startswith = function (x) {\n        // nargs: 1\n        if (this.constructor !== String)\n            return this.startswith.apply(this, arguments);\n        return this.indexOf(x) == 0;\n    };\n    var Buffer, GlooObject, IndexBuffer, Program, Texture2D, Texture3DLike, VertexBuffer, __version__, check_error, console;\n    // PyScript module for gloo2.js - lightweight object oriented GL.\n    {\n        /* if this_is_js() */\n        console = window.console;\n    }\n    __version__ = '0.3';\n    check_error = function (gl, when) {\n        var e, err, err_3, errors, msg, stub1_seq, stub2_itr;\n        when = when === undefined ? 'periodic check' : when;\n        // Check this from time to time to detect GL errors.\n        //\n        //     Parameters\n        //     ----------\n        //     when : str\n        //         Shown in the exception to help the developer determine when\n        //         this check was done.\n        errors = [];\n        while (true) {\n            err = gl.getError();\n            if (_pyfunc_equals(err, gl.NO_ERROR) || _pyfunc_truthy(errors) && _pyfunc_equals(err, errors[errors.length - 1])) {\n                break;\n            }\n            _pymeth_append.call(errors, err);\n        }\n        if (errors.length) {\n            msg = '';\n            stub1_seq = errors;\n            if (typeof stub1_seq === 'object' && !Array.isArray(stub1_seq)) {\n                stub1_seq = Object.keys(stub1_seq);\n            }\n            for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {\n                e = stub1_seq[stub2_itr];\n                msg = _pyfunc_add(msg, e);\n            }\n            err_3 = new Error('RuntimeError:' + ('OpenGL got errors (' + when + '): ' + msg + ''));\n            err_3.name = 'RuntimeError';\n            throw err_3;\n        }\n        return null;\n    };\n    GlooObject = function () {\n        // Abstract base class for all Gloo classes.\n        _pyfunc_instantiate(this, arguments);\n    };\n    GlooObject.prototype._base_class = Object;\n    GlooObject.prototype._class_name = 'GlooObject';\n    GlooObject.prototype.__init__ = function (gl) {\n        // Init by passing the webgl context object.\n        this._gl = gl;\n        this.handle = null;\n        this._create();\n        if (!(this.handle !== null)) {\n            throw 'AssertionError: ' + 'this.handle !== null';\n        }\n        return null;\n    };\n    GlooObject.prototype._create = function () {\n        var err_2;\n        err_2 = new Error('NotImplementedError:' + '');\n        err_2.name = 'NotImplementedError';\n        throw err_2;\n        return null;\n    };\n    Program = function () {\n        // The program is the central component to connect gloo objects and shaders.\n        _pyfunc_instantiate(this, arguments);\n    };\n    Program.prototype = Object.create(GlooObject.prototype);\n    Program.prototype._base_class = GlooObject.prototype;\n    Program.prototype._class_name = 'Program';\n    Program.prototype.UTYPEMAP = {\n        'float': 'uniform1fv',\n        'vec2': 'uniform2fv',\n        'vec3': 'uniform3fv',\n        'vec4': 'uniform4fv',\n        'int': 'uniform1iv',\n        'ivec2': 'uniform2iv',\n        'ivec3': 'uniform3iv',\n        'ivec4': 'uniform4iv',\n        'bool': 'uniform1iv',\n        'bvec2': 'uniform2iv',\n        'bvec3': 'uniform3iv',\n        'bvec4': 'uniform4iv',\n        'mat2': 'uniformMatrix2fv',\n        'mat3': 'uniformMatrix3fv',\n        'mat4': 'uniformMatrix4fv',\n        'sampler1D': 'uniform1i',\n        'sampler2D': 'uniform1i',\n        'sampler3D': 'uniform1i'\n    };\n    Program.prototype.ATYPEMAP = {\n        'float': 'vertexAttrib1f',\n        'vec2': 'vertexAttrib2f',\n        'vec3': 'vertexAttrib3f',\n        'vec4': 'vertexAttrib4f'\n    };\n    Program.prototype.ATYPEINFO = {\n        'float': [\n            1,\n            5126\n        ],\n        'vec2': [\n            2,\n            5126\n        ],\n        'vec3': [\n            3,\n            5126\n        ],\n        'vec4': [\n            4,\n            5126\n        ]\n    };\n    Program.prototype._create = function () {\n        this.handle = this._gl.createProgram();\n        this.locations = {};\n        this._unset_variables = [];\n        this._validated = false;\n        this._samplers = {};\n        this._attributes = {};\n        this._known_invalid = [];\n        return null;\n    };\n    Program.prototype.delete = function () {\n        // Delete the program.\n        this._gl.deleteProgram(this.handle);\n        return null;\n    };\n    Program.prototype.activate = function () {\n        // Activate the program.\n        this._gl.useProgram(this.handle);\n        return null;\n    };\n    Program.prototype.deactivate = function () {\n        // Disable the program.\n        this._gl.useProgram(0);\n        return null;\n    };\n    Program.prototype.set_shaders = function (vert, frag) {\n        var code, err_3, err_4, errors, frag_handle, gl, handle, i, status, stub3_, tmp, type_, vert_handle;\n        // Set GLSL code for the vertex and fragment shader.\n        //\n        // This function takes care of setting the shading code and\n        // compiling+linking it into a working program object that is ready\n        // to use.\n        //\n        // Parameters\n        // ----------\n        // vert : str\n        //     GLSL code for the vertex shader.\n        // frag : str\n        //     GLSL code for the fragment shader.\n        gl = this._gl;\n        this._linked = false;\n        vert_handle = gl.createShader(gl.VERTEX_SHADER);\n        frag_handle = gl.createShader(gl.FRAGMENT_SHADER);\n        tmp = [\n            [\n                vert,\n                vert_handle,\n                'vertex'\n            ],\n            [\n                frag,\n                frag_handle,\n                'fragment'\n            ]\n        ];\n        for (i = 0; i < 2; i += 1) {\n            stub3_ = tmp[i];\n            code = stub3_[0];\n            handle = stub3_[1];\n            type_ = stub3_[2];\n            gl.shaderSource(handle, code);\n            gl.compileShader(handle);\n            status = gl.getShaderParameter(handle, gl.COMPILE_STATUS);\n            if (!_pyfunc_truthy(status)) {\n                errors = gl.getShaderInfoLog(handle);\n                err_4 = new Error('RuntimeError:' + _pyfunc_add('errors in ' + type_ + ' shader:\\n', errors));\n                err_4.name = 'RuntimeError';\n                throw err_4;\n            }\n        }\n        gl.attachShader(this.handle, vert_handle);\n        gl.attachShader(this.handle, frag_handle);\n        gl.linkProgram(this.handle);\n        if (!_pyfunc_truthy(gl.getProgramParameter(this.handle, gl.LINK_STATUS))) {\n            err_3 = new Error('RuntimeError:' + ('Program link error:\\n' + gl.getProgramInfoLog(this.handle)));\n            err_3.name = 'RuntimeError';\n            throw err_3;\n        }\n        this._unset_variables = this._get_active_attributes_and_uniforms();\n        gl.detachShader(this.handle, vert_handle);\n        gl.detachShader(this.handle, frag_handle);\n        gl.deleteShader(vert_handle);\n        gl.deleteShader(frag_handle);\n        this._known_invalid = [];\n        this._linked = true;\n        return null;\n    };\n    Program.prototype._get_active_attributes_and_uniforms = function () {\n        var attributes, ca, container, count, cu, getActive, getLocation, gl, i, info, j, m, name, regex, stub4_, stub5_seq, stub6_itr, uniforms, x;\n        // Retrieve active attributes and uniforms to be able to check that\n        // all uniforms/attributes are set by the user.\n        gl = this._gl;\n        this.locations = {};\n        regex = new window.RegExp('(\\\\w+)\\\\s*(\\\\[(\\\\d+)\\\\])\\\\s*');\n        cu = gl.getProgramParameter(this.handle, gl.ACTIVE_UNIFORMS);\n        ca = gl.getProgramParameter(this.handle, gl.ACTIVE_ATTRIBUTES);\n        attributes = [];\n        uniforms = [];\n        stub5_seq = [\n            [\n                attributes,\n                ca,\n                gl.getActiveAttrib,\n                gl.getAttribLocation\n            ],\n            [\n                uniforms,\n                cu,\n                gl.getActiveUniform,\n                gl.getUniformLocation\n            ]\n        ];\n        if (typeof stub5_seq === 'object' && !Array.isArray(stub5_seq)) {\n            stub5_seq = Object.keys(stub5_seq);\n        }\n        for (stub6_itr = 0; stub6_itr < stub5_seq.length; stub6_itr += 1) {\n            x = stub5_seq[stub6_itr];\n            stub4_ = x;\n            container = stub4_[0];\n            count = stub4_[1];\n            getActive = stub4_[2];\n            getLocation = stub4_[3];\n            for (i = 0; i < count; i += 1) {\n                info = getActive.call(gl, this.handle, i);\n                name = info.name;\n                m = name.match(regex);\n                if (_pyfunc_truthy(m)) {\n                    name = m[1];\n                    for (j = 0; j < info.size; j += 1) {\n                        _pymeth_append.call(container, [\n                            '' + name + '[' + j + ']',\n                            info.type\n                        ]);\n                    }\n                } else {\n                    _pymeth_append.call(container, [\n                        name,\n                        info.type\n                    ]);\n                }\n                this.locations[name] = getLocation.call(gl, this.handle, name);\n            }\n        }\n        return _pyfunc_add(function list_comprehenson() {\n            var res = [];\n            var v, iter0, i0;\n            iter0 = attributes;\n            if (typeof iter0 === 'object' && !Array.isArray(iter0)) {\n                iter0 = Object.keys(iter0);\n            }\n            for (i0 = 0; i0 < iter0.length; i0++) {\n                v = iter0[i0];\n                {\n                    res.push(v[0]);\n                }\n            }\n            return res;\n        }.apply(this), function list_comprehenson() {\n            var res = [];\n            var v, iter0, i0;\n            iter0 = uniforms;\n            if (typeof iter0 === 'object' && !Array.isArray(iter0)) {\n                iter0 = Object.keys(iter0);\n            }\n            for (i0 = 0; i0 < iter0.length; i0++) {\n                v = iter0[i0];\n                {\n                    res.push(v[0]);\n                }\n            }\n            return res;\n        }.apply(this));\n    };\n    Program.prototype.set_texture = function (name, value) {\n        var err_3, handle, unit;\n        // Set a texture sampler.\n        //\n        // A texture is a 2 dimensional grid of colors/intensities that\n        // can be applied to a face (or used for other means by providing\n        // a regular grid of data).\n        //\n        // Parameters\n        // ----------\n        // name : str\n        //     The name by which the texture is known in the GLSL code.\n        // value : Texture2D\n        //     The gloo Texture2D object to bind.\n        if (!_pyfunc_truthy(this._linked)) {\n            err_3 = new Error('RuntimeError:' + 'Cannot set uniform when program has no code');\n            err_3.name = 'RuntimeError';\n            throw err_3;\n        }\n        handle = _pymeth_get.call(this.locations, name, -1);\n        if (_pyfunc_truthy(handle < 0)) {\n            if (!_pyfunc_contains(name, this._known_invalid)) {\n                _pymeth_append.call(this._known_invalid, name);\n                console.log('Variable ' + name + ' is not an active texture');\n            }\n            return null;\n        }\n        if (_pyfunc_contains(name, this._unset_variables)) {\n            _pymeth_remove.call(this._unset_variables, name);\n        }\n        this.activate();\n        if (true) {\n            unit = _pymeth_keys.call(this._samplers).length;\n            if (_pyfunc_contains(name, this._samplers)) {\n                unit = this._samplers[name][this._samplers[name].length - 1];\n            }\n            this._samplers[name] = [\n                value._target,\n                value.handle,\n                unit\n            ];\n            this._gl.uniform1i(handle, unit);\n        }\n        return null;\n    };\n    Program.prototype.set_uniform = function (name, type_, value) {\n        var a_type, count, err_3, funcname, handle, j, name_;\n        // Set a uniform value.\n        //\n        // A uniform is a value that is global to both the vertex and\n        // fragment shader.\n        //\n        // Parameters\n        // ----------\n        // name : str\n        //     The name by which the uniform is known in the GLSL code.\n        // type_ : str\n        //     The type of the uniform, e.g. 'float', 'vec2', etc.\n        // value : list of scalars\n        //     The value for the uniform. Should be a list even for type float.\n        if (!_pyfunc_truthy(this._linked)) {\n            err_3 = new Error('RuntimeError:' + 'Cannot set uniform when program has no code');\n            err_3.name = 'RuntimeError';\n            throw err_3;\n        }\n        handle = _pymeth_get.call(this.locations, name, -1);\n        if (_pyfunc_truthy(handle < 0)) {\n            if (!_pyfunc_contains(name, this._known_invalid)) {\n                _pymeth_append.call(this._known_invalid, name);\n                console.log('Variable ' + name + ' is not an active uniform');\n            }\n            return null;\n        }\n        if (_pyfunc_contains(name, this._unset_variables)) {\n            _pymeth_remove.call(this._unset_variables, name);\n        }\n        count = 1;\n        if (!_pymeth_startswith.call(type_, 'mat')) {\n            a_type = _pymeth_get.call({\n                'int': 'float',\n                'bool': 'float'\n            }, type_, _pymeth_lstrip.call(type_, 'ib'));\n            count = Math.floor(value.length / this.ATYPEINFO[a_type][0]);\n        }\n        if (_pyfunc_truthy(count > 1)) {\n            for (j = 0; j < count; j += 1) {\n                if (_pyfunc_contains('' + name + '[' + j + ']', this._unset_variables)) {\n                    name_ = '' + name + '[' + j + ']';\n                    if (_pyfunc_contains(name_, this._unset_variables)) {\n                        _pymeth_remove.call(this._unset_variables, name_);\n                    }\n                }\n            }\n        }\n        funcname = this.UTYPEMAP[type_];\n        this.activate();\n        if (_pymeth_startswith.call(type_, 'mat')) {\n            this._gl[funcname](handle, false, value);\n        } else {\n            this._gl[funcname](handle, value);\n        }\n        return null;\n    };\n    Program.prototype.set_attribute = function (name, type_, value, stride, offset) {\n        var args, err_3, funcname, gtype, handle, is_vbo, size, stub7_;\n        stride = stride === undefined ? 0 : stride;\n        offset = offset === undefined ? 0 : offset;\n        // Set an attribute value.\n        //\n        // An attribute represents per-vertex data and can only be used\n        // in the vertex shader.\n        //\n        // Parameters\n        // ----------\n        // name : str\n        //     The name by which the attribute is known in the GLSL code.\n        // type_ : str\n        //     The type of the attribute, e.g. 'float', 'vec2', etc.\n        // value : VertexBuffer, array\n        //     If value is a VertexBuffer, it is used (with stride and offset)\n        //     for the vertex data. If value is an array, its used to set\n        //     the value of all vertices (similar to a uniform).\n        // stide : int, default 0\n        //     The stride to \"sample\" the vertex data inside the buffer. Unless\n        //     multiple vertex data are packed into a single buffer, this should\n        //     be zero.\n        // offset : int, default 0\n        //     The offset to \"sample\" the vertex data inside the buffer. Unless\n        //     multiple vertex data are packed into a single buffer, or only\n        //     a part of the data must be used, this should probably be zero.\n        if (!_pyfunc_truthy(this._linked)) {\n            err_3 = new Error('RuntimeError:' + 'Cannot set attribute when program has no code');\n            err_3.name = 'RuntimeError';\n            throw err_3;\n        }\n        is_vbo = value instanceof VertexBuffer;\n        handle = _pymeth_get.call(this.locations, name, -1);\n        if (_pyfunc_truthy(handle < 0)) {\n            if (!_pyfunc_contains(name, this._known_invalid)) {\n                _pymeth_append.call(this._known_invalid, name);\n                if (_pyfunc_truthy(is_vbo) && _pyfunc_truthy(offset > 0)) {\n                } else {\n                    console.log('Variable ' + name + ' is not an active attribute');\n                }\n            }\n            return null;\n        }\n        if (_pyfunc_contains(name, this._unset_variables)) {\n            _pymeth_remove.call(this._unset_variables, name);\n        }\n        this.activate();\n        if (!_pyfunc_truthy(is_vbo)) {\n            funcname = this.ATYPEMAP[type_];\n            this._attributes[name] = [\n                0,\n                handle,\n                funcname,\n                value\n            ];\n        } else {\n            stub7_ = this.ATYPEINFO[type_];\n            size = stub7_[0];\n            gtype = stub7_[1];\n            funcname = 'vertexAttribPointer';\n            args = [\n                size,\n                gtype,\n                this._gl.FALSE,\n                stride,\n                offset\n            ];\n            this._attributes[name] = [\n                value.handle,\n                handle,\n                funcname,\n                args\n            ];\n        }\n        return null;\n    };\n    Program.prototype._pre_draw = function () {\n        var args, attr_handle, funcname, stub10_, stub11_seq, stub8_, stub9_seq, tex_handle, tex_target, unit, vbo_handle, x;\n        // Prepare for drawing.\n        this.activate();\n        stub9_seq = this._samplers;\n        for (x in stub9_seq) {\n            if (!stub9_seq.hasOwnProperty(x)) {\n                continue;\n            }\n            x = stub9_seq[x];\n            stub8_ = x;\n            tex_target = stub8_[0];\n            tex_handle = stub8_[1];\n            unit = stub8_[2];\n            this._gl.activeTexture(_pyfunc_add(this._gl.TEXTURE0, unit));\n            this._gl.bindTexture(tex_target, tex_handle);\n        }\n        stub11_seq = this._attributes;\n        for (x in stub11_seq) {\n            if (!stub11_seq.hasOwnProperty(x)) {\n                continue;\n            }\n            x = stub11_seq[x];\n            stub10_ = x;\n            vbo_handle = stub10_[0];\n            attr_handle = stub10_[1];\n            funcname = stub10_[2];\n            args = stub10_[3];\n            if (_pyfunc_truthy(vbo_handle)) {\n                this._gl.bindBuffer(this._gl.ARRAY_BUFFER, vbo_handle);\n                this._gl.enableVertexAttribArray(attr_handle);\n                this._gl[funcname].apply(this._gl, [].concat([attr_handle], args));\n            } else {\n                this._gl.bindBuffer(this._gl.ARRAY_BUFFER, null);\n                this._gl.disableVertexAttribArray(attr_handle);\n                this._gl[funcname].apply(this._gl, [].concat([attr_handle], args));\n            }\n        }\n        if (!_pyfunc_truthy(this._validated)) {\n            this._validated = true;\n            this._validate();\n        }\n        return null;\n    };\n    Program.prototype._validate = function () {\n        var err_3;\n        if (this._unset_variables.length) {\n            console.log('Program has unset variables: ' + this._unset_variables + '');\n        }\n        this._gl.validateProgram(this.handle);\n        if (!_pyfunc_truthy(this._gl.getProgramParameter(this.handle, this._gl.VALIDATE_STATUS))) {\n            console.log(this._gl.getProgramInfoLog(this.handle));\n            err_3 = new Error('RuntimeError:' + 'Program validation error');\n            err_3.name = 'RuntimeError';\n            throw err_3;\n        }\n        return null;\n    };\n    Program.prototype.draw = function (mode, selection) {\n        var count, err_3, first, gtype, stub12_;\n        // Draw the current visualization defined by the program.\n        //\n        // Parameters\n        // ----------\n        // mode : GL enum\n        //     Can be POINTS, LINES, LINE_LOOP, LINE_STRIP, LINE_FAN, TRIANGLES\n        // selection : 2-element tuple or IndexBuffer\n        //     The selection to draw, specified either as (first, count) or an\n        //     IndexBuffer object.\n        if (!_pyfunc_truthy(this._linked)) {\n            err_3 = new Error('RuntimeError:' + 'Cannot draw program if code has not been set');\n            err_3.name = 'RuntimeError';\n            throw err_3;\n        }\n        check_error(this._gl, 'before draw');\n        if (_pyfunc_truthy(selection instanceof IndexBuffer)) {\n            this._pre_draw();\n            selection.activate();\n            count = selection._buffer_size / 2;\n            gtype = this._gl.UNSIGNED_SHORT;\n            this._gl.drawElements(mode, count, gtype, 0);\n            selection.deactivate();\n        } else {\n            stub12_ = selection;\n            first = stub12_[0];\n            count = stub12_[1];\n            if (_pyfunc_truthy(count)) {\n                this._pre_draw();\n                this._gl.drawArrays(mode, first, count);\n            }\n        }\n        check_error(this._gl, 'after draw');\n        return null;\n    };\n    Buffer = function () {\n        // Base buffer class for vertex data or index data.\n        _pyfunc_instantiate(this, arguments);\n    };\n    Buffer.prototype = Object.create(GlooObject.prototype);\n    Buffer.prototype._base_class = GlooObject.prototype;\n    Buffer.prototype._class_name = 'Buffer';\n    Buffer.prototype._target = null;\n    Buffer.prototype._usage = 35048;\n    Buffer.prototype._create = function () {\n        this.handle = this._gl.createBuffer();\n        this._buffer_size = 0;\n        return null;\n    };\n    Buffer.prototype.delete = function () {\n        // Delete the buffer.\n        this._gl.deleteBuffer(this.handle);\n        return null;\n    };\n    Buffer.prototype.activate = function () {\n        // Activete the buffer.\n        this._gl.bindBuffer(this._target, this.handle);\n        return null;\n    };\n    Buffer.prototype.deactivate = function () {\n        // Disable the buffer.\n        this._gl.bindBuffer(this._target, null);\n        return null;\n    };\n    Buffer.prototype.set_size = function (nbytes) {\n        // Set the size of the buffer in bytes.\n        //\n        // Parameters\n        // ----------\n        // nbytes : int\n        //     The number of bytes that the buffer needs to hold.\n        if (!_pyfunc_equals(nbytes, this._buffer_size)) {\n            this.activate();\n            this._gl.bufferData(this._target, nbytes, this._usage);\n            this._buffer_size = nbytes;\n        }\n        return null;\n    };\n    Buffer.prototype.set_data = function (offset, data) {\n        // Set the buffer data.\n        //\n        // Parameters\n        // ----------\n        // offset : int\n        //     The offset in bytes for the new data.\n        // data : typed array\n        //     The data to upload.\n        this.activate();\n        this._gl.bufferSubData(this._target, offset, data);\n        return null;\n    };\n    VertexBuffer = function () {\n        // A buffer for vertex data.\n        _pyfunc_instantiate(this, arguments);\n    };\n    VertexBuffer.prototype = Object.create(Buffer.prototype);\n    VertexBuffer.prototype._base_class = Buffer.prototype;\n    VertexBuffer.prototype._class_name = 'VertexBuffer';\n    VertexBuffer.prototype._target = 34962;\n    IndexBuffer = function () {\n        // A buffer for index data.\n        _pyfunc_instantiate(this, arguments);\n    };\n    IndexBuffer.prototype = Object.create(Buffer.prototype);\n    IndexBuffer.prototype._base_class = Buffer.prototype;\n    IndexBuffer.prototype._class_name = 'IndexBuffer';\n    IndexBuffer.prototype._target = 34963;\n    Texture2D = function () {\n        // A 2 dimensional regular grid.\n        _pyfunc_instantiate(this, arguments);\n    };\n    Texture2D.prototype = Object.create(GlooObject.prototype);\n    Texture2D.prototype._base_class = GlooObject.prototype;\n    Texture2D.prototype._class_name = 'Texture2D';\n    Texture2D.prototype._target = 3553;\n    Texture2D.prototype._types = {\n        'Int8Array': 5120,\n        'Uint8Array': 5121,\n        'Int16Array': 5122,\n        'Uint16Array': 5123,\n        'Int32Array': 5124,\n        'Uint32Array': 5125,\n        'Float32Array': 5126\n    };\n    Texture2D.prototype._create = function () {\n        this.handle = this._gl.createTexture();\n        this._shape_format = null;\n        return null;\n    };\n    Texture2D.prototype.delete = function () {\n        // Delete the texture.\n        this._gl.deleteTexture(this.handle);\n        return null;\n    };\n    Texture2D.prototype.activate = function () {\n        // Activate the texture.\n        this._gl.bindTexture(this._target, this.handle);\n        return null;\n    };\n    Texture2D.prototype.deactivate = function () {\n        // Disable the texture.\n        this._gl.bindTexture(this._target, 0);\n        return null;\n    };\n    Texture2D.prototype._get_alignment = function (width) {\n        var alignment, alignments, stub13_seq, stub14_itr;\n        // Determines a textures byte alignment. If the width isn't a\n        //         power of 2 we need to adjust the byte alignment of the image.\n        //         The image height is unimportant.\n        //\n        //         www.opengl.org/wiki/Common_Mistakes#Texture_upload_and_pixel_reads\n        alignments = [\n            4,\n            8,\n            2,\n            1\n        ];\n        stub13_seq = alignments;\n        if (typeof stub13_seq === 'object' && !Array.isArray(stub13_seq)) {\n            stub13_seq = Object.keys(stub13_seq);\n        }\n        for (stub14_itr = 0; stub14_itr < stub13_seq.length; stub14_itr += 1) {\n            alignment = stub13_seq[stub14_itr];\n            if (_pyfunc_equals(width % alignment, 0)) {\n                return alignment;\n            }\n        }\n        return null;\n    };\n    Texture2D.prototype.set_wrapping = function (wrap_s, wrap_t) {\n        // Set the texture wrapping mode.\n        //\n        // Parameters\n        // ----------\n        // wrap_s : GL enum\n        //     The mode to wrap the x dimension. Valid values are REPEAT\n        //     CLAMP_TO_EDGE MIRRORED_REPEAT\n        // wrap_t : GL enum\n        //     The mode to wrap the y dimension. Same options as for wrap_s.\n        this.activate();\n        this._gl.texParameterf(this._target, this._gl.TEXTURE_WRAP_S, wrap_s);\n        this._gl.texParameterf(this._target, this._gl.TEXTURE_WRAP_T, wrap_t);\n        return null;\n    };\n    Texture2D.prototype.set_interpolation = function (min, mag) {\n        // Set the texture interpolation mode\n        //\n        // Parameters\n        // ----------\n        // min : GL enum\n        //     The interpolation mode when minifying (i.e. zoomed out). Valid\n        //     values are LINEAR and NEAREST.\n        // max : GL enum\n        //     The interpolation mode when magnifying (i.e. zoomed in). Valid\n        //     values are LINEAR, NEAREST, NEAREST_MIPMAP_NEAREST,\n        //     LINEAR_MIPMAP_NEAREST, NEAREST_MIPMAP_LINEAR, LINEAR_MIPMAP_LINEAR.\n        this.activate();\n        this._gl.texParameterf(this._target, this._gl.TEXTURE_MIN_FILTER, min);\n        this._gl.texParameterf(this._target, this._gl.TEXTURE_MAG_FILTER, mag);\n        return null;\n    };\n    Texture2D.prototype.set_size = function (shape, format) {\n        var height, stub15_, width;\n        // Set the size of the 2D texture.\n        //\n        // Parameters\n        // ----------\n        // shape : tuple of ints\n        //     The shape of the data to upload\n        // format : GL enum\n        //     The format of the texture data. Can be LUMINANCE, LUMINANCE_ALPHA,\n        //     RGB, and RGBA.\n        stub15_ = shape;\n        height = stub15_[0];\n        width = stub15_[1];\n        if (!_pyfunc_equals([\n                height,\n                width,\n                format\n            ], this._shape_format)) {\n            this._shape_format = [\n                height,\n                width,\n                format\n            ];\n            this.activate();\n            this._gl.texImage2D(this._target, 0, format, width, height, 0, format, this._gl.UNSIGNED_BYTE, null);\n        }\n        this.u_shape = [\n            height,\n            width\n        ];\n        return null;\n    };\n    Texture2D.prototype.set_data = function (offset, shape, data) {\n        var _, alignment, err_3, format, gtype, height, stub16_, stub17_, width, x, y;\n        // Set the 2D texture data.\n        //\n        // Parameters\n        // ----------\n        // offset : tuple of ints\n        //     Offset in pixels for each dimension.\n        // shape : tuple of ints\n        //     The shape of the data to upload\n        // data : typed array\n        //     The actual pixel data. Can be of any type, but on the GPU the\n        //     dat is stored in 8 bit precision.\n        if (_pyfunc_equals(shape.length, 2)) {\n            shape = [\n                shape[0],\n                shape[1],\n                1\n            ];\n        }\n        this.activate();\n        format = this._shape_format[2];\n        stub16_ = shape;\n        height = stub16_[0];\n        width = stub16_[1];\n        _ = stub16_[2];\n        stub17_ = offset;\n        y = stub17_[0];\n        x = stub17_[1];\n        gtype = _pymeth_get.call(this._types, data.constructor.name, null);\n        if (gtype === null) {\n            err_3 = new Error('ValueError:' + ('Type ' + data.constructor.name + ' not allowed for texture'));\n            err_3.name = 'ValueError';\n            throw err_3;\n        }\n        alignment = this._get_alignment(_pyfunc_mult(shape[shape.length - 2], shape[shape.length - 1]));\n        if (!_pyfunc_equals(alignment, 4)) {\n            this._gl.pixelStorei(this._gl.UNPACK_ALIGNMENT, alignment);\n        }\n        this._gl.texSubImage2D(this._target, 0, x, y, width, height, format, gtype, data);\n        if (!_pyfunc_equals(alignment, 4)) {\n            this._gl.pixelStorei(this._gl.UNPACK_ALIGNMENT, 4);\n        }\n        return null;\n    };\n    Texture3DLike = function () {\n        // A 2D texture with support to simulate a 3D texture.\n        //\n        // To use this class, use set_size() and set_data() as if it was a 3D\n        // texture. Add the GLSL_SAMPLE_NEAREST or GLSL_SAMPLE_LINEAR to the\n        // shader to add the sample3D() function that can be used instead of\n        // texture2D(). This function needs ``shape`` and ``tiles`` arguments\n        // which can be set via uniforms, using the ``u_shape`` and ``u_tiles``\n        // attributes of this object.\n        _pyfunc_instantiate(this, arguments);\n    };\n    Texture3DLike.prototype = Object.create(Texture2D.prototype);\n    Texture3DLike.prototype._base_class = Texture2D.prototype;\n    Texture3DLike.prototype._class_name = 'Texture3DLike';\n    Texture3DLike.prototype.GLSL_SAMPLE_NEAREST = '\\n        vec4 sample3D(sampler2D tex, vec3 texcoord, vec3 shape, vec2 tiles) {\\n            shape.xyz = shape.zyx;  // silly row-major convention\\n            float nrows = tiles.y, ncols = tiles.x;\\n            // Don\\'t let adjacent frames be interpolated into this one\\n            texcoord.x = min(texcoord.x * shape.x, shape.x - 0.5);\\n            texcoord.x = max(0.5, texcoord.x) / shape.x;\\n            texcoord.y = min(texcoord.y * shape.y, shape.y - 0.5);\\n            texcoord.y = max(0.5, texcoord.y) / shape.y;\\n\\n            float zindex = floor(texcoord.z * shape.z);\\n\\n            // Do a lookup in the 2D texture\\n            float u = (mod(zindex, ncols) + texcoord.x) / ncols;\\n            float v = (floor(zindex / ncols) + texcoord.y) / nrows;\\n\\n            return texture2D(tex, vec2(u,v));\\n        }\\n    ';\n    Texture3DLike.prototype.GLSL_SAMPLE_LINEAR = '\\n        vec4 sample3D(sampler2D tex, vec3 texcoord, vec3 shape, vec2 tiles) {\\n            shape.xyz = shape.zyx;  // silly row-major convention\\n            float nrows = tiles.y, ncols = tiles.x;\\n            // Don\\'t let adjacent frames be interpolated into this one\\n            texcoord.x = min(texcoord.x * shape.x, shape.x - 0.5);\\n            texcoord.x = max(0.5, texcoord.x) / shape.x;\\n            texcoord.y = min(texcoord.y * shape.y, shape.y - 0.5);\\n            texcoord.y = max(0.5, texcoord.y) / shape.y;\\n\\n            float z = texcoord.z * shape.z;\\n            float zindex1 = floor(z);\\n            float u1 = (mod(zindex1, ncols) + texcoord.x) / ncols;\\n            float v1 = (floor(zindex1 / ncols) + texcoord.y) / nrows;\\n\\n            float zindex2 = zindex1 + 1.0;\\n            float u2 = (mod(zindex2, ncols) + texcoord.x) / ncols;\\n            float v2 = (floor(zindex2 / ncols) + texcoord.y) / nrows;\\n\\n            vec4 s1 = texture2D(tex, vec2(u1, v1));\\n            vec4 s2 = texture2D(tex, vec2(u2, v2));\\n\\n            return s1 * (zindex2 - z) + s2 * (z - zindex1);\\n        }\\n    ';\n    Texture3DLike.prototype._get_tile_info = function (shape) {\n        var err_3, max_size, ncols, nrows;\n        max_size = this._gl.getParameter(this._gl.MAX_TEXTURE_SIZE);\n        nrows = Math.floor(max_size / shape[1]);\n        nrows = Math.min(nrows, shape[0]);\n        ncols = window.Math.ceil(shape[0] / nrows);\n        if (_pyfunc_truthy(_pyfunc_mult(ncols, shape[2]) > max_size)) {\n            err_3 = new Error('RuntimeError:' + ('Cannot fit 3D data with shape ' + shape + ' onto simulated 2D texture.'));\n            err_3.name = 'RuntimeError';\n            throw err_3;\n        }\n        return [\n            nrows,\n            ncols\n        ];\n    };\n    Texture3DLike.prototype.set_size = function (shape, format) {\n        var ncols, nrows, sim_shape, stub18_;\n        // Set the size of the 3D texture.\n        //\n        // Parameters\n        // ----------\n        // shape : tuple of ints\n        //     The shape of the data to upload\n        // format : GL enum\n        //     The format of the texture data. Can be LUMINANCE, LUMINANCE_ALPHA,\n        //     RGB, and RGBA.\n        stub18_ = this._get_tile_info(shape);\n        nrows = stub18_[0];\n        ncols = stub18_[1];\n        sim_shape = [\n            _pyfunc_mult(shape[1], nrows),\n            _pyfunc_mult(shape[2], ncols)\n        ];\n        Texture3DLike.prototype._base_class.set_size.call(this, sim_shape, format);\n        this.u_shape = [\n            shape[0],\n            shape[1],\n            shape[2]\n        ];\n        this.u_tiles = [\n            ncols,\n            nrows\n        ];\n        return null;\n    };\n    Texture3DLike.prototype.set_data = function (offset, shape, data) {\n        var Type, col, elements_per_tile, err_3, ncols, nrows, row, sim_shape, stub19_, stub20_, tile, z, zeros;\n        // Set the 3D texture data.\n        //\n        // Parameters\n        // ----------\n        // offset : tuple of ints\n        //     Offset in pixels for each dimension.\n        // shape : tuple of ints\n        //     The shape of the data to upload\n        // data : typed array\n        //     The actual pixel data. Can be of any type, but on the GPU the\n        //     dat is stored in 8 bit precision.\n        if (_pyfunc_equals(shape.length, 3)) {\n            shape = [\n                shape[0],\n                shape[1],\n                shape[2],\n                1\n            ];\n        }\n        if (!_pyfunc_all(function list_comprehenson() {\n                var res = [];\n                var i, iter0, i0;\n                iter0 = offset;\n                if (typeof iter0 === 'object' && !Array.isArray(iter0)) {\n                    iter0 = Object.keys(iter0);\n                }\n                for (i0 = 0; i0 < iter0.length; i0++) {\n                    i = iter0[i0];\n                    {\n                        res.push(_pyfunc_equals(i, 0));\n                    }\n                }\n                return res;\n            }.apply(this))) {\n            err_3 = new Error('ValueError:' + 'Texture3DLike does not support nonzero offset (for now)');\n            err_3.name = 'ValueError';\n            throw err_3;\n        }\n        stub19_ = this._get_tile_info(shape);\n        nrows = stub19_[0];\n        ncols = stub19_[1];\n        sim_shape = [\n            _pyfunc_mult(shape[1], nrows),\n            _pyfunc_mult(shape[2], ncols),\n            shape[3]\n        ];\n        if (_pyfunc_equals(ncols, 1)) {\n            Texture3DLike.prototype._base_class.set_data.call(this, [\n                0,\n                0\n            ], sim_shape, data);\n        } else {\n            Type = data.constructor;\n            zeros = new Type(_pyfunc_mult(_pyfunc_mult(sim_shape[0], sim_shape[1]), sim_shape[2]));\n            Texture3DLike.prototype._base_class.set_data.call(this, [\n                0,\n                0\n            ], sim_shape, zeros);\n            for (z = 0; z < shape[0]; z += 1) {\n                stub20_ = [\n                    Math.floor(z / ncols),\n                    z % ncols\n                ];\n                row = stub20_[0];\n                col = stub20_[1];\n                elements_per_tile = Math.floor(data.length / shape[0]);\n                tile = data.slice(_pyfunc_mult(z, elements_per_tile), _pyfunc_mult(z + 1, elements_per_tile));\n                Texture3DLike.prototype._base_class.set_data.call(this, [\n                    _pyfunc_mult(row, shape[1]),\n                    _pyfunc_mult(col, shape[2])\n                ], shape.slice(1), tile);\n            }\n        }\n        return null;\n    };\n    module.exports = {\n        'Buffer': Buffer,\n        'GlooObject': GlooObject,\n        'IndexBuffer': IndexBuffer,\n        'Program': Program,\n        'Texture2D': Texture2D,\n        'Texture3DLike': Texture3DLike,\n        'VertexBuffer': VertexBuffer,\n        'check_error': check_error,\n        'console': console\n    };\n}"]}